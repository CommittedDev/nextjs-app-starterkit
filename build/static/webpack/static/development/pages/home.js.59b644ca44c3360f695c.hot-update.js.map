{"version":3,"file":"static/webpack/static\\development\\pages\\home.js.59b644ca44c3360f695c.hot-update.js","sources":["webpack:///./src/components/table/Table.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { renderValueType, handleInputChange } from './utils'\r\nimport Input from '@material-ui/core/Input';\r\nimport TableTitle from 'src/components/table/TableTitle'\r\nimport HeaderCols from 'src/components/table/HeaderCols'\r\nimport NoDataTableCell from 'src/components/table/NoDataTableCell'\r\nimport WaterAnalysisTitle from 'src/components/table/WaterAnalysisTitle'\r\nimport PropTypes from 'prop-types';\r\n// import { calculate } from 'src/components/data/tableUtils';\r\nimport connect from './connect'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    },\r\n    textFieldUNEditable: {\r\n        background: 'lightblue'\r\n    }\r\n}));\r\n\r\nfunction SimpleTable(props) {\r\n    const { data, headerCols, tableTitle, tablesData, waterAnalysisTitle, actions } = props\r\n    const { updateTablesValues } = actions\r\n    const classes = useStyles();\r\n\r\n    // console.log(`tablesData`, tablesData);\r\n\r\n    const tableValues = tablesData\r\n    const influencingValues = [\r\n        tableValues.d10,\r\n        tableValues.d11,\r\n        tableValues.d21,\r\n        tableValues.d22,\r\n        tableValues.e30,\r\n        tableValues.d32,\r\n        tableValues.f32,\r\n        tableValues.d34,\r\n        tableValues.d35,\r\n        tableValues.d36,\r\n        tableValues.d37,\r\n        tableValues.d38,\r\n        tableValues.d39,\r\n        tableValues.d49,\r\n        tableValues.e49,\r\n        tableValues.d23\r\n    ]\r\n\r\n    useEffect(() => {\r\n        updateReadOnlyValues()\r\n    }, influencingValues)\r\n\r\n    const updateReadOnlyValues = () => {\r\n        if (tableValues.d10 && tableValues.d11) { // d12\r\n            const res = tableValues.d10 - tableValues.d11\r\n            updateTablesValues({ values: { d12: res } })\r\n        }\r\n        if (tableValues.d21 && tableValues.d22) { // d23\r\n            const res = tableValues.d21 - tableValues.d22\r\n            updateTablesValues({ values: { d23: res } })\r\n        }\r\n        if (tableValues.e30 && tableValues.d32) { // e32\r\n            const res = tableValues.e30 * tableValues.d32\r\n            updateTablesValues({ values: { e32: res } })\r\n        }\r\n        if (tableValues.e30 && tableValues.d32) { // f32\r\n            const res = tableValues.e30 * tableValues.d32\r\n            updateTablesValues({ values: { f32: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d34) { // f34\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d34\r\n            updateTablesValues({ values: { f34: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d35) { // f35\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d35\r\n            updateTablesValues({ values: { f35: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d36) { // f36\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d36\r\n            updateTablesValues({ values: { f36: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d37) { // f37\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d37\r\n            updateTablesValues({ values: { f37: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d38) { // f38\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d38\r\n            updateTablesValues({ values: { f38: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d39) { // f39\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d39\r\n            updateTablesValues({ values: { f39: res } })\r\n        }\r\n        if (tableValues.e30) { // d47\r\n            const res = tableValues.e30\r\n            updateTablesValues({ values: { d47: res } })\r\n        }\r\n        if (tableValues.d49) { // d48\r\n            const res = tableValues.d49 / 560 / 1000\r\n            updateTablesValues({ values: { d48: res } })\r\n        }\r\n        if (tableValues.e49) { // e48\r\n            const res = tableValues.e49 / 560 / 1000\r\n            updateTablesValues({ values: { e48: res } })\r\n        }\r\n        if (tableValues.d11 && tableValues.d23) { // d49\r\n            const res = tableValues.d11 * tableValues.d23 * 1000\r\n            updateTablesValues({ values: { d49: res, e49: res } })\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        if (!data) return <NoDataTableCell className={classes.TableCell} />\r\n        return data.map((row, i) => {\r\n            return <TableRow key={i}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n\r\n                {row.units &&\r\n                    <TableCell align=\"left\">\r\n                        {row.units}\r\n                    </TableCell>}\r\n\r\n                {row.fields\r\n                    ? row.fields.map((field) => {\r\n                        return <TableCell key={field.location} align=\"left\">\r\n                            {renderValueType(field, updateTablesValues, tableValues, classes)}\r\n                        </TableCell>\r\n                    })\r\n                    : <TableCell align=\"left\">{renderValueType(row, updateTablesValues, tableValues, classes)}</TableCell>\r\n                }\r\n            </TableRow>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    {tableTitle && <TableTitle className={classes.tableTitle} tableTitle={tableTitle} />}\r\n                    {/* happens only in Water Analysis table */}\r\n                    {waterAnalysisTitle\r\n                        && <WaterAnalysisTitle value={tableValues['e30'] || ''}\r\n                            handleInputChange={(e) => handleInputChange(e, updateTablesValues)} />}\r\n                    {/* ---- */}\r\n                    {headerCols && <HeaderCols data={headerCols} />}\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n// SimpleTable.defaultProps = {\r\n//     units: true\r\n// };\r\n\r\n// SimpleTable.propTypes = {\r\n//     units: PropTypes.bool\r\n// };\r\n\r\nexport default connect(SimpleTable)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AAAA;AAGA;AACA;AADA;AAGA;AAGA;AACA;AADA;AAfA;AAAA;AACA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAGA;AACA;AAmsourceRoot":""}