{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.d5fa9ee2d1ffdf127a6e.hot-update.js","sources":["webpack:///./src/services/logger/index.js","webpack:///./src/services/logger/logger.js","webpack:///./src/store/tables/workers/updateTablesValues.js"],"sourcesContent":["import logger from './logger'\r\n\r\nexport {\r\n    logger\r\n} ","// import { notification } from 'antd';\r\nconst isProd = process.env.NODE_ENV === 'production'\r\n\r\nconst logger = {\r\n  error: (message, data) => {\r\n    if(isProd) {\r\n      // TODO: is a good place to send error to some logger service\r\n    }else{\r\n      console.error(message, data)\r\n    //   notification.open({\r\n    //     message: 'Dev Mode Error Notification',\r\n    //     description: message + '\\n' + (data ? JSON.stringify(data) : '')\r\n    //   });\r\n    };\r\n  },\r\n  info: (message) => {\r\n    if(isProd) {\r\n      // TODO: is a good place to send error to some logger service\r\n    }else{\r\n      console.info(message)\r\n    };\r\n  },\r\n  warn: (message, data) => {\r\n    if(isProd) {\r\n      // TODO: is a good place to send error to some logger service\r\n    }else{\r\n      console.warn(message, data)\r\n    //   notification.open({\r\n    //     message: 'Dev Mode Warning Notification',\r\n    //     description: message + '\\n' + (data ? JSON.stringify(data) : '')\r\n    //   });\r\n    };\r\n  },\r\n  debug: (message, data) => {\r\n    if(!isProd) {\r\n      console.debug('#debug -' + message, data || '')\r\n    }\r\n  }\r\n}\r\n\r\nexport default logger;","import { put } from 'redux-saga/effects';\r\nimport { logger } from 'src/services/logger';\r\nimport { setValues } from '../actions';\r\n\r\nexport default function* updateTablesValue(action) {\r\n    const { values } = action.payload\r\n    try {\r\n        //     yield put(setRamzorPress({ storeKey, status: consts.API_STATUS.START, error: null, loading: true, data: dataForClient }));\r\n        //     const res = yield httpRequest(api.request, { url: 'setCompliance', method: 'post', data: dataToSend });\r\n        //     if (res.error) {\r\n        //         const errType = res.message === 'Network Error' ? consts.API_STATUS.FAILED_NETWORK : consts.API_STATUS.FAILED;\r\n        //         yield put(setRamzorPress({ storeKey, status: errType, error: res, loading: false, data: dataForClient }));\r\n        //     } else {\r\n        //         yield put(setRamzorPress({\r\n        //             storeKey, status: consts.API_STATUS.FINISHED, error: null, loading: false, data: dataForClient\r\n        //         }));\r\n        //     }\r\n        const res = values\r\n        yield put(setValues({\r\n            storeKey, status: consts.API_STATUS.FINISHED, error: null, loading: false, data: res\r\n        }));\r\n    } catch (err) {\r\n        logger.log('error in onRamzorPress', err);\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAqCA;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AALA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAfA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAkBA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}