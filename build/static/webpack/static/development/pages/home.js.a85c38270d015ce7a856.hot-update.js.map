{"version":3,"file":"static/webpack/static\\development\\pages\\home.js.a85c38270d015ce7a856.hot-update.js","sources":["webpack:///./src/components/Table.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { TYPES } from 'src/components/data'\r\nimport Input from '@material-ui/core/Input';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\nimport { calculate } from 'src/components/data/tableUtils';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    }\r\n}));\r\n\r\n\r\nexport default function SimpleTable(props) {\r\n    const { tableTitle, data } = props\r\n    const classes = useStyles();\r\n\r\n    const [values, setValues] = React.useState({});\r\n    // useEffect(() => {\r\n    //     const readOnly = document.getElementsByClassName('readOnlyInput12')\r\n    //     console.log('readOnly', readOnly);\r\n\r\n    // }, [values])\r\n    const updateReadOnlyValues = () => {\r\n        if (values.d10 && values.d11) {\r\n            const res = values.d10 - values.d11\r\n            setValues({ ...values, [d12]: res });\r\n        }\r\n    }\r\n    const handleTextChange = event => {\r\n        updateReadOnlyValues()\r\n        setValues({ ...values, [event.target.id]: event.target.value });\r\n    };\r\n    function valuetext(value) {\r\n        return `${value}`;\r\n    }\r\n\r\n    const handleSelectChange = event => {\r\n        setValues({ ...values, [event.target.id]: event.target.value });\r\n    };\r\n    const onChangeSlider = (event, val, location) => {\r\n        setValues({ ...values, [location]: val });\r\n    };\r\n\r\n    console.log('values', values)\r\n\r\n    const getMarks = (row) => {\r\n        if (!row) return [];\r\n        let arr = []\r\n        let i = row.min\r\n        while (i <= row.max) {\r\n            arr.push({ value: i })\r\n            i += row.ticks\r\n        }\r\n        // if we want lables in the  edges of the slider\r\n        // if (arr.length) { \r\n        //     debugger\r\n        //     arr[0].label = row.min.toString()\r\n        //     arr[arr.length - 1].label = row.max.toString()\r\n        // }\r\n        return arr\r\n    }\r\n    const onchangereadonly = (e) => {\r\n        console.log('yesssssssssssssssssss');\r\n\r\n    }\r\n    const renderValueType = (row) => {\r\n        switch (row.type) {\r\n            case TYPES.NUMERIC:\r\n                return <Input\r\n                    id={row.location}\r\n                    label=\"Number\"\r\n                    value={values[row.location] || ''}\r\n                    onChange={handleTextChange}\r\n                    type=\"tel\"\r\n                    className={classes.textField}\r\n\r\n                />\r\n            case TYPES.RANGE:\r\n                return <Slider\r\n                    defaultValue={Math.floor((row.min + row.max) / 2)}\r\n                    getAriaValueText={valuetext}\r\n                    onChange={(e, val) => onChangeSlider(e, val, row.location)}\r\n                    aria-labelledby=\"discrete-slider-always\"\r\n                    step={row.ticks}\r\n                    min={row.min}\r\n                    max={row.max}\r\n                    marks={getMarks(row)}\r\n                    valueLabelDisplay=\"on\"\r\n                />\r\n            case TYPES.SELECT:\r\n                return <Select\r\n                    id={row.location}\r\n                    native\r\n                    value={values[row.location]}\r\n                    onChange={handleSelectChange}\r\n                // inputProps={{\r\n                //     name: 'age',\r\n                //     // id: 'age-native-simple',\r\n                // }}\r\n                >\r\n                    {row.data.map((item, i) => {\r\n                        return <option key={i} value={item}>{item}</option>\r\n                    })}\r\n                </Select>\r\n            case TYPES.NOT_EDITABLE:\r\n                return <Input\r\n                    id={row.location}\r\n                    // readOnly\r\n                    value={calculate(row.location, values)}\r\n                    className={'classes.textField'}\r\n                    onChange={onchangereadonly}\r\n                />\r\n            default:\r\n                return row.type\r\n        }\r\n    }\r\n\r\n    const renderTableData = () => {\r\n        if (!data) return (\r\n            <TableRow>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    no data\r\n                </TableCell>\r\n            </TableRow>\r\n        )\r\n        return data.map(row => (\r\n            <TableRow key={row.name}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n                <TableCell align=\"left\">{row.value}</TableCell>\r\n                <TableCell align=\"left\">{renderValueType(row)}</TableCell>\r\n            </TableRow>\r\n        ))\r\n    }\r\n    console.log('data', data);\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className={classes.tableTitle} align=\"left\">{tableTitle}</TableCell>\r\n                        <TableCell align=\"left\">Value</TableCell>\r\n                        <TableCell align=\"left\">Units</TableCell>\r\n\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AAAA;AAGA;AACA;AADA;AAGA;AAZA;AAAA;AAkiDA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AANA;AASA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAUA;;;;A","sourceRoot":""}