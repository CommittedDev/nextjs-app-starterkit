{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.50e5d8a725a0207b5dfb.hot-update.js","sources":["webpack:///./src/components/table/utils.js"],"sourcesContent":["import { TYPES } from 'src/components/data'\r\nimport Input from '@material-ui/core/Input';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst getCalculateNewValues = (key, value, tableValues) => {\r\n    const newValues = Object.assign({}, tableValues, { [key]: value });\r\n    newValues['d12'] = newValues.d10 - newValues.d11\r\n    newValues['d23'] = newValues.d21 - newValues.d22\r\n    newValues['e32'] = tableValues.e30 * tableValues.d32\r\n    newValues['f32'] = tableValues.e30 * tableValues.d32\r\n    newValues['f34'] = tableValues.f32 / tableValues.d32 * tableValues.d34\r\n    newValues['f35'] = tableValues.f32 / tableValues.d32 * tableValues.d35\r\n    newValues['f36'] = tableValues.f32 / tableValues.d32 * tableValues.d36\r\n    newValues['f37'] = tableValues.f32 / tableValues.d32 * tableValues.d37\r\n    newValues['f38'] = tableValues.f32 / tableValues.d32 * tableValues.d38\r\n    newValues['f39'] = tableValues.f32 / tableValues.d32 * tableValues.d39\r\n    newValues['d47'] = tableValues.e30\r\n    newValues['d48'] = tableValues.d49 / 560 / 1000\r\n    newValues['e48'] = tableValues.e49 / 560 / 1000\r\n    newValues['e49'] = tableValues.d11 * tableValues.d23 * 1000\r\n    newValues['d50'] = tableValues.d49 * 0.000330693393472\r\n    newValues['e50'] = tableValues.e49 * 0.000330693393472\r\n    newValues['d51'] = tableValues.d48 + tableValues.d52\r\n    newValues['e51'] = tableValues.e48 + tableValues.e52\r\n    newValues['d52'] = tableValues.d48 * (1 / tableValues.d47)\r\n    newValues['e52'] = tableValues.e48 * (1 / tableValues.e47)\r\n    newValues['c56'] = tableValues.d25 * tableValues.d26 * tableValues.d27\r\n    newValues['c57'] = tableValues.c55 * tableValues.c56\r\n    newValues['c58'] = tableValues.c55 / tableValues.d52\r\n    newValues['c59'] = tableValues.c55 / tableValues.d51\r\n    newValues['d63'] = tableValues.d32\r\n    newValues['d64'] = tableValues.d33\r\n    newValues['d65'] = tableValues.d34\r\n    newValues['d66'] = tableValues.d35\r\n    newValues['d67'] = tableValues.d36\r\n    newValues['d68'] = tableValues.d37\r\n    newValues['d69'] = tableValues.d38\r\n    newValues['d70'] = tableValues.d39\r\n    newValues['e63'] = tableValues.d63 * tableValues.e47\r\n    newValues['e65'] = tableValues.d65 * tableValues.e47 * 0.75\r\n    newValues['e66'] = tableValues.d66 * tableValues.e47 * 0.65\r\n    newValues['e67'] = tableValues.d67 * tableValues.e47\r\n    newValues['e69'] = tableValues.d69 * tableValues.e47 * 0.985\r\n    newValues['e70'] = tableValues.d70 * tableValues.e47\r\n    // Model Configuration\r\n    newValues['i62'] = tableValues.i58 / 4\r\n    newValues['i63'] = tableValues.i58 / 8\r\n    newValues['i64'] = tableValues.i58 / 16\r\n    newValues['j62'] = Math.ceil(tableValues.i62)\r\n    newValues['j63'] = Math.ceil(tableValues.i63)\r\n    newValues['j64'] = Math.ceil(tableValues.i64)\r\n    // UET circulation flow rate\r\n    newValues['i68'] = tableValues.j64 * 100\r\n    newValues['i69'] = tableValues.j64 * 150\r\n    // UETWorkingParameters\r\n    newValues['j79'] = tableValues.j64 * 1.2\r\n    newValues['j80'] = tableValues.j64 * (2.35 * 1.2) * (1 + 0.2)\r\n    // Theoretical Energy Savings \r\n    newValues['d79'] = tableValues.j14\r\n    newValues['d80'] = tableValues.j16\r\n    newValues['d81'] = `${tableValues.d80 * 0.2285 / 2.54}%`\r\n    newValues['d82'] = ((tableValues.d50*(tableValues.d79*0.284)*(tableValues.d81+1)*tableValues.c56)-((tableValues.d79*0.284)*tableValues.c56*tableValues.d50))*0.75\r\n    return newValues\r\n}\r\n\r\nexport const handleInputChange = (event, updateTablesValues, tableValues) => {\r\n    const field = event.target.id;\r\n    const newValue = Number(event.target.value);\r\n    const newValues = getCalculateNewValues(field, newValue, tableValues)\r\n    // debugger\r\n    updateTablesValues({ values: newValues })\r\n};\r\n\r\nconst handleSelectChange = (event, updateTablesValues, tableValues) => {\r\n    const field = event.target.id;\r\n    const newValue = event.target.value;\r\n    const newValues = getCalculateNewValues(field, newValue, tableValues)\r\n    updateTablesValues({ values: newValues })\r\n};\r\n\r\nconst onChangeSlider = (event, val, location, updateTablesValues, tableValues) => {\r\n    const field = location;\r\n    const newValue = val;\r\n    const newValues = getCalculateNewValues(field, newValue, tableValues)\r\n    updateTablesValues({ values: newValues })\r\n};\r\n\r\n\r\nfunction valuetext(value) {\r\n    return `${value}`;\r\n}\r\n\r\nconst getMarks = (row, ) => {\r\n    if (!row) return [];\r\n    let arr = []\r\n    let i = row.min\r\n    while (i <= row.max) {\r\n        arr.push({ value: i })\r\n        i += row.ticks\r\n    }\r\n    // if we want lables in the  edges of the slider\r\n    // if (arr.length) { \r\n    //     debugger\r\n    //     arr[0].label = row.min.toString()\r\n    //     arr[arr.length - 1].label = row.max.toString()\r\n    // }\r\n    return arr\r\n}\r\n\r\nexport const renderValueType = (row, updateTablesValues, tableValues, classes) => {\r\n    const type = row.type\r\n    switch (type) {\r\n        case TYPES.NUMERIC:\r\n            return <Input\r\n                id={row.location}\r\n                label=\"Number\"\r\n                value={tableValues[row.location] === 0 ? '' : tableValues[row.location]}\r\n                onChange={(e) => handleInputChange(e, updateTablesValues, tableValues)}\r\n                type=\"number\"\r\n                className={classes.textField}\r\n            />\r\n        case TYPES.RANGE:\r\n            return <Slider\r\n                defaultValue={tableValues[row.location]}//Math.floor((row.min + row.max) / 2)\r\n                getAriaValueText={valuetext}\r\n                onChange={(e, val) => onChangeSlider(e, val, row.location, updateTablesValues, tableValues)}\r\n                aria-labelledby=\"discrete-slider-always\"\r\n                step={row.ticks}\r\n                min={row.min}\r\n                max={row.max}\r\n                marks={getMarks(row)}\r\n                valueLabelDisplay=\"on\"\r\n            />\r\n        case TYPES.SELECT:\r\n            return <Select\r\n                id={row.location}\r\n                native\r\n                value={tableValues[row.location]}\r\n                onChange={(e) => handleSelectChange(e, updateTablesValues, tableValues)}\r\n            >\r\n                {row.data.map((item, i) => {\r\n                    return <option key={i} value={item}>{item}</option>\r\n                })}\r\n            </Select>\r\n        case TYPES.NOT_EDITABLE:\r\n            return <Input\r\n                id={row.location}\r\n                value={isNaN(tableValues[row.location]) || tableValues[row.location] === 0 ? '' : tableValues[row.location]}\r\n                readOnly\r\n                className={classes.textFieldUNEditable}\r\n            />\r\n        default:\r\n            return row.type\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AANA;AACA;AAOA;AACA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAzCA;AA2CA;;;;A","sourceRoot":""}