{"version":3,"file":"static/webpack/static\\development\\pages\\home.js.3020114d8d0341da2660.hot-update.js","sources":["webpack:///./src/components/Table.js"],"sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { TYPES } from 'src/components/data'\r\nimport Input from '@material-ui/core/Input';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    }\r\n}));\r\n\r\n\r\nexport default function SimpleTable(props) {\r\n    const { tableTitle, data } = props\r\n    const classes = useStyles();\r\n\r\n    const [values, setValues] = React.useState({});\r\n\r\n    const handleTextChange = () => event => {\r\n        setValues({ ...values, [event.target.id]: event.target.value });\r\n    };\r\n    function valuetext(value) {\r\n        return `${value}`;\r\n    }\r\n\r\n    const handleSelectChange = event => { //continue here\r\n        setValues({ ...values, [event.target.id]: event.target.value });\r\n    };\r\n    const onChangeSlider = (event, val, ) => { //continue here\r\n        console.log('event', event);\r\n        console.log('val', val);\r\n\r\n        // setValues({ ...values, [name]: event.target.value });\r\n    };\r\n\r\n    const marks = [\r\n        {\r\n            value: 0,\r\n            label: '0째C',\r\n        },\r\n        {\r\n            value: 20,\r\n            // label: '20째C',\r\n        },\r\n        {\r\n            value: 37,\r\n            // label: '37째C',\r\n        },\r\n        {\r\n            value: 100,\r\n            label: '100째C',\r\n        },\r\n    ];\r\n    console.log('values', values)\r\n\r\n    const getMarks = () => {\r\n        let arr = []\r\n        for (let index = data.min; index <= data.max; index + data.ticks) {\r\n            arr.push({ value: index })\r\n        }\r\n        if (arr.length) {\r\n            arr[0].label = data.min.toString()\r\n            arr[arr.length - 1].label = data.max.toString()\r\n        }\r\n        return arr\r\n    }\r\n    const renderValueType = (row) => {\r\n        switch (row.type) {\r\n            case TYPES.NUMERIC:\r\n                return <Input\r\n                    id={row.location}\r\n                    label=\"Number\"\r\n                    value={values[row.location]}\r\n                    onChange={handleTextChange()}\r\n                    type=\"tel\"\r\n                    className={classes.textField}\r\n\r\n                />\r\n            case TYPES.RANGE:\r\n                return <Slider\r\n                    defaultValue={row.max / 2}\r\n                    getAriaValueText={valuetext}\r\n                    onChange={onChangeSlider}\r\n                    aria-labelledby=\"discrete-slider-always\"\r\n                    step={row.ticks}\r\n                    min={row.min}\r\n                    max={row.max}\r\n                    marks={getMarks()}\r\n                    valueLabelDisplay=\"on\"\r\n                />\r\n            case TYPES.SELECT:\r\n                return <Select\r\n                    id={row.location}\r\n                    native\r\n                    value={values[row.location]}\r\n                    onChange={handleSelectChange}\r\n                // inputProps={{\r\n                //     name: 'age',\r\n                //     // id: 'age-native-simple',\r\n                // }}\r\n                >\r\n                    {row.data.map((item, i) => {\r\n                        return <option key={i} value={item}>{item}</option>\r\n                    })}\r\n                    {/* <option value=\"\" />\r\n                    <option value={item}>{item}</option>\r\n                    <option value={item}>{item}</option> */}\r\n                </Select>\r\n\r\n\r\n            default:\r\n                return row.type\r\n        }\r\n    }\r\n\r\n    const renderTableData = () => {\r\n        return data.map(row => (\r\n            <TableRow key={row.name}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n                <TableCell align=\"left\">{row.value}</TableCell>\r\n                <TableCell align=\"left\">{renderValueType(row)}</TableCell>\r\n            </TableRow>\r\n        ))\r\n    }\r\n    console.log('data', data);\r\n    if (!data) return <div>no data</div>\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className={classes.tableTitle} align=\"left\">{tableTitle}</TableCell>\r\n                        <TableCell align=\"left\">Value</TableCell>\r\n                        <TableCell align=\"left\">Units</TableCell>\r\n\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AAAA;AAGA;AACA;AADA;AAGA;AAZA;AAAA;AAkBA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AACA;AACA;AAFA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AA5CA;AA8CA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AANA;AASA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAUA;;;;A","sourceRoot":""}