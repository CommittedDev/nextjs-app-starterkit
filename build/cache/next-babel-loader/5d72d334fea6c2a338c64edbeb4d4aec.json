{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateTablesValues);\n\nimport { put } from 'redux-saga/effects';\nimport { logger } from \"../../../services/logger\";\nimport { setValues } from \"../actions\";\nexport default function updateTablesValues(action) {\n  var values, data;\n  return _regeneratorRuntime.wrap(function updateTablesValues$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          values = action.payload.values;\n          debugger;\n          _context.prev = 2;\n          //     yield put(setRamzorPress({ storeKey, status: consts.API_STATUS.START, error: null, loading: true, data: dataForClient }));\n          //     const res = yield httpRequest(api.request, { url: 'setCompliance', method: 'post', data: dataToSend });\n          //     if (res.error) {\n          //         const errType = res.message === 'Network Error' ? consts.API_STATUS.FAILED_NETWORK : consts.API_STATUS.FAILED;\n          //         yield put(setRamzorPress({ storeKey, status: errType, error: res, loading: false, data: dataForClient }));\n          //     } else {\n          //         yield put(setRamzorPress({\n          //             storeKey, status: consts.API_STATUS.FINISHED, error: null, loading: false, data: dataForClient\n          //         }));\n          //     }\n          data = values;\n          _context.next = 6;\n          return put(setValues({\n            error: null,\n            loading: false,\n            data: data\n          }));\n\n        case 6:\n          _context.next = 11;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](2);\n          console.log('error in onRamzorPress', _context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 8]]);\n}","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\store\\tables\\workers\\updateTablesValues.js"],"names":["updateTablesValues","put","logger","setValues","action","values","payload","data","error","loading","console","log"],"mappings":";;;;yBAIyBA,kB;;AAJzB,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,MAAT;AACA,SAASC,SAAT;AAEA,eAAe,SAAUH,kBAAV,CAA6BI,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACHC,UAAAA,MADG,GACQD,MAAM,CAACE,OADf,CACHD,MADG;AAEX;AAFW;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACME,UAAAA,IAdC,GAcMF,MAdN;AAAA;AAeP,iBAAMJ,GAAG,CAACE,SAAS,CAAC;AAChBK,YAAAA,KAAK,EAAE,IADS;AACHC,YAAAA,OAAO,EAAE,KADN;AACaF,YAAAA,IAAI,EAAJA;AADb,WAAD,CAAV,CAAT;;AAfO;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBPG,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AAnBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put } from 'redux-saga/effects';\r\nimport { logger } from 'src/services/logger';\r\nimport { setValues } from '../actions';\r\n\r\nexport default function* updateTablesValues(action) {\r\n    const { values } = action.payload\r\n    debugger\r\n    try {\r\n        //     yield put(setRamzorPress({ storeKey, status: consts.API_STATUS.START, error: null, loading: true, data: dataForClient }));\r\n        //     const res = yield httpRequest(api.request, { url: 'setCompliance', method: 'post', data: dataToSend });\r\n        //     if (res.error) {\r\n        //         const errType = res.message === 'Network Error' ? consts.API_STATUS.FAILED_NETWORK : consts.API_STATUS.FAILED;\r\n        //         yield put(setRamzorPress({ storeKey, status: errType, error: res, loading: false, data: dataForClient }));\r\n        //     } else {\r\n        //         yield put(setRamzorPress({\r\n        //             storeKey, status: consts.API_STATUS.FINISHED, error: null, loading: false, data: dataForClient\r\n        //         }));\r\n        //     }\r\n        const data = values\r\n        yield put(setValues({\r\n            error: null, loading: false, data\r\n        }));\r\n    } catch (err) {\r\n        console.log('error in onRamzorPress', err);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}