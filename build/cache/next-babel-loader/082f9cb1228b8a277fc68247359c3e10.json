{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { renderValueType, handleInputChange } from \"./utils\";\nimport Input from '@material-ui/core/Input';\nimport TableTitle from \"./TableTitle\";\nimport HeaderCols from \"./HeaderCols\";\nimport NoDataTableCell from \"./NoDataTableCell\";\nimport WaterAnalysisTitle from \"./WaterAnalysisTitle\";\nimport PropTypes from 'prop-types'; // import { calculate } from 'src/components/data/tableUtils';\n\nimport connect from \"./connect\";\nconst useStyles = makeStyles(theme => ({\n  root: {// width: '100%',\n    // marginTop: theme.spacing(3),\n    // overflowX: 'auto',\n  },\n  table: {// width: 600,\n  },\n  tableTitle: {\n    fontSize: 20\n  },\n  TableCell: {},\n  textFieldUNEditable: {\n    background: 'lightblue'\n  }\n}));\n\nfunction SimpleTable(props) {\n  const {\n    data,\n    headerCols,\n    tableTitle,\n    tablesData,\n    waterAnalysisTitle,\n    actions\n  } = props;\n  const {\n    updateTablesValues\n  } = actions;\n  const classes = useStyles();\n  console.log(`tablesData`, tablesData);\n  const tableValues = tablesData;\n  const influencingValues = [tableValues.d10, tableValues.d11, tableValues.d21, tableValues.d22, tableValues.e30, tableValues.d32, tableValues.f32, tableValues.d34, tableValues.d35, tableValues.d36, tableValues.d37, tableValues.d38, tableValues.d39, tableValues.d49, tableValues.e49, tableValues.d23];\n  useEffect(() => {\n    updateReadOnlyValues();\n  }, influencingValues);\n\n  const updateReadOnlyValues = () => {\n    if (tableValues.d10 && tableValues.d11) {\n      // d12\n      const res = tableValues.d10 - tableValues.d11;\n      updateTablesValues({\n        values: {\n          d12: res\n        }\n      });\n    }\n\n    if (tableValues.d21 && tableValues.d22) {\n      // d23\n      const res = tableValues.d21 - tableValues.d22;\n      updateTablesValues({\n        values: {\n          d23: res\n        }\n      });\n    }\n\n    if (tableValues.e30 && tableValues.d32) {\n      // e32\n      const res = tableValues.e30 * tableValues.d32;\n      updateTablesValues({\n        values: {\n          e32: res\n        }\n      });\n    }\n\n    if (tableValues.e30 && tableValues.d32) {\n      // f32\n      const res = tableValues.e30 * tableValues.d32;\n      updateTablesValues({\n        values: {\n          f32: res\n        }\n      });\n    }\n\n    if (tableValues.f32 && tableValues.d32 && tableValues.d34) {\n      // f34\n      const res = tableValues.f32 / tableValues.d32 * tableValues.d34;\n      updateTablesValues({\n        values: {\n          f34: res\n        }\n      });\n    }\n\n    if (tableValues.f32 && tableValues.d32 && tableValues.d35) {\n      // f35\n      const res = tableValues.f32 / tableValues.d32 * tableValues.d35;\n      updateTablesValues({\n        values: {\n          f35: res\n        }\n      });\n    }\n\n    if (tableValues.f32 && tableValues.d32 && tableValues.d36) {\n      // f36\n      const res = tableValues.f32 / tableValues.d32 * tableValues.d36;\n      updateTablesValues({\n        values: {\n          f36: res\n        }\n      });\n    }\n\n    if (tableValues.f32 && tableValues.d32 && tableValues.d37) {\n      // f37\n      const res = tableValues.f32 / tableValues.d32 * tableValues.d37;\n      updateTablesValues({\n        values: {\n          f37: res\n        }\n      });\n    }\n\n    if (tableValues.f32 && tableValues.d32 && tableValues.d38) {\n      // f38\n      const res = tableValues.f32 / tableValues.d32 * tableValues.d38;\n      updateTablesValues({\n        values: {\n          f38: res\n        }\n      });\n    }\n\n    if (tableValues.f32 && tableValues.d32 && tableValues.d39) {\n      // f39\n      const res = tableValues.f32 / tableValues.d32 * tableValues.d39;\n      updateTablesValues({\n        values: {\n          f39: res\n        }\n      });\n    }\n\n    if (tableValues.e30) {\n      // d47\n      const res = tableValues.e30;\n      updateTablesValues({\n        values: {\n          d47: res\n        }\n      });\n    }\n\n    if (tableValues.d49) {\n      // d48\n      const res = tableValues.d49 / 560 / 1000;\n      updateTablesValues({\n        values: {\n          d48: res\n        }\n      });\n    }\n\n    if (tableValues.e49) {\n      // e48\n      const res = tableValues.e49 / 560 / 1000;\n      updateTablesValues({\n        values: {\n          e48: res\n        }\n      });\n    }\n\n    if (tableValues.d11 && tableValues.d23) {\n      // d49\n      const res = tableValues.d11 * tableValues.d23 * 1000;\n      updateTablesValues({\n        values: {\n          d49: res,\n          e49: res\n        }\n      });\n    }\n  };\n\n  const renderTableData = () => {\n    if (!data) return __jsx(NoDataTableCell, {\n      className: classes.TableCell\n    });\n    return data.map((row, i) => {\n      return __jsx(TableRow, {\n        key: i\n      }, __jsx(TableCell, {\n        align: \"left\",\n        className: classes.TableCell\n      }, row.name), row.units && __jsx(TableCell, {\n        align: \"left\"\n      }, row.units), row.fields ? row.fields.map(field => {\n        return __jsx(TableCell, {\n          key: field.location,\n          align: \"left\"\n        }, renderValueType(field, updateTablesValues, tableValues, classes));\n      }) : __jsx(TableCell, {\n        align: \"left\"\n      }, renderValueType(row, updateTablesValues, tableValues, classes)));\n    });\n  };\n\n  return __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Table, {\n    className: classes.table\n  }, __jsx(TableHead, null, tableTitle && __jsx(TableTitle, {\n    className: classes.tableTitle,\n    tableTitle: tableTitle\n  }), waterAnalysisTitle && __jsx(WaterAnalysisTitle, {\n    value: tableValues['e30'] || '',\n    handleInputChange: e => handleInputChange(e, updateTablesValues)\n  }), headerCols && __jsx(HeaderCols, {\n    data: headerCols\n  })), __jsx(TableBody, null, renderTableData())));\n} // SimpleTable.defaultProps = {\n//     units: true\n// };\n// SimpleTable.propTypes = {\n//     units: PropTypes.bool\n// };\n\n\nexport default connect(SimpleTable);","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\table\\Table.js"],"names":["React","useEffect","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","renderValueType","handleInputChange","Input","TableTitle","HeaderCols","NoDataTableCell","WaterAnalysisTitle","PropTypes","connect","useStyles","theme","root","table","tableTitle","fontSize","textFieldUNEditable","background","SimpleTable","props","data","headerCols","tablesData","waterAnalysisTitle","actions","updateTablesValues","classes","console","log","tableValues","influencingValues","d10","d11","d21","d22","e30","d32","f32","d34","d35","d36","d37","d38","d39","d49","e49","d23","updateReadOnlyValues","res","values","d12","e32","f34","f35","f36","f37","f38","f39","d47","d48","e48","renderTableData","map","row","i","name","units","fields","field","location","e"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { renderValueType, handleInputChange } from './utils'\r\nimport Input from '@material-ui/core/Input';\r\nimport TableTitle from 'src/components/table/TableTitle'\r\nimport HeaderCols from 'src/components/table/HeaderCols'\r\nimport NoDataTableCell from 'src/components/table/NoDataTableCell'\r\nimport WaterAnalysisTitle from 'src/components/table/WaterAnalysisTitle'\r\nimport PropTypes from 'prop-types';\r\n// import { calculate } from 'src/components/data/tableUtils';\r\nimport connect from './connect'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    },\r\n    textFieldUNEditable: {\r\n        background: 'lightblue'\r\n    }\r\n}));\r\n\r\nfunction SimpleTable(props) {\r\n    const { data, headerCols, tableTitle, tablesData, waterAnalysisTitle, actions } = props\r\n    const { updateTablesValues } = actions\r\n    const classes = useStyles();\r\n\r\n    console.log(`tablesData`, tablesData);\r\n\r\n    const tableValues = tablesData\r\n    const influencingValues = [\r\n        tableValues.d10,\r\n        tableValues.d11,\r\n        tableValues.d21,\r\n        tableValues.d22,\r\n        tableValues.e30,\r\n        tableValues.d32,\r\n        tableValues.f32,\r\n        tableValues.d34,\r\n        tableValues.d35,\r\n        tableValues.d36,\r\n        tableValues.d37,\r\n        tableValues.d38,\r\n        tableValues.d39,\r\n        tableValues.d49,\r\n        tableValues.e49,\r\n        tableValues.d23\r\n    ]\r\n\r\n    useEffect(() => {\r\n        updateReadOnlyValues()\r\n    }, influencingValues)\r\n\r\n    const updateReadOnlyValues = () => {\r\n        if (tableValues.d10 && tableValues.d11) { // d12\r\n            const res = tableValues.d10 - tableValues.d11\r\n            updateTablesValues({ values: { d12: res } })\r\n        }\r\n        if (tableValues.d21 && tableValues.d22) { // d23\r\n            const res = tableValues.d21 - tableValues.d22\r\n            updateTablesValues({ values: { d23: res } })\r\n        }\r\n        if (tableValues.e30 && tableValues.d32) { // e32\r\n            const res = tableValues.e30 * tableValues.d32\r\n            updateTablesValues({ values: { e32: res } })\r\n        }\r\n        if (tableValues.e30 && tableValues.d32) { // f32\r\n            const res = tableValues.e30 * tableValues.d32\r\n            updateTablesValues({ values: { f32: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d34) { // f34\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d34\r\n            updateTablesValues({ values: { f34: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d35) { // f35\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d35\r\n            updateTablesValues({ values: { f35: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d36) { // f36\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d36\r\n            updateTablesValues({ values: { f36: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d37) { // f37\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d37\r\n            updateTablesValues({ values: { f37: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d38) { // f38\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d38\r\n            updateTablesValues({ values: { f38: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d39) { // f39\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d39\r\n            updateTablesValues({ values: { f39: res } })\r\n        }\r\n        if (tableValues.e30) { // d47\r\n            const res = tableValues.e30\r\n            updateTablesValues({ values: { d47: res } })\r\n        }\r\n        if (tableValues.d49) { // d48\r\n            const res = tableValues.d49 / 560 / 1000\r\n            updateTablesValues({ values: { d48: res } })\r\n        }\r\n        if (tableValues.e49) { // e48\r\n            const res = tableValues.e49 / 560 / 1000\r\n            updateTablesValues({ values: { e48: res } })\r\n        }\r\n        if (tableValues.d11 && tableValues.d23) { // d49\r\n            const res = tableValues.d11 * tableValues.d23 * 1000\r\n            updateTablesValues({ values: { d49: res, e49: res } })\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        if (!data) return <NoDataTableCell className={classes.TableCell} />\r\n        return data.map((row, i) => {\r\n            return <TableRow key={i}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n\r\n                {row.units &&\r\n                    <TableCell align=\"left\">\r\n                        {row.units}\r\n                    </TableCell>}\r\n\r\n                {row.fields\r\n                    ? row.fields.map((field) => {\r\n                        return <TableCell key={field.location} align=\"left\">\r\n                            {renderValueType(field, updateTablesValues, tableValues, classes)}\r\n                        </TableCell>\r\n                    })\r\n                    : <TableCell align=\"left\">{renderValueType(row, updateTablesValues, tableValues, classes)}</TableCell>\r\n                }\r\n            </TableRow>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    {tableTitle && <TableTitle className={classes.tableTitle} tableTitle={tableTitle} />}\r\n                    {/* happens only in Water Analysis table */}\r\n                    {waterAnalysisTitle\r\n                        && <WaterAnalysisTitle value={tableValues['e30'] || ''}\r\n                            handleInputChange={(e) => handleInputChange(e, updateTablesValues)} />}\r\n                    {/* ---- */}\r\n                    {headerCols && <HeaderCols data={headerCols} />}\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n// SimpleTable.defaultProps = {\r\n//     units: true\r\n// };\r\n\r\n// SimpleTable.propTypes = {\r\n//     units: PropTypes.bool\r\n// };\r\n\r\nexport default connect(SimpleTable)"]},"metadata":{},"sourceType":"module"}