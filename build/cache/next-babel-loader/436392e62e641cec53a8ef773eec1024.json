{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { TYPES } from \"../data\";\nimport Input from '@material-ui/core/Input';\nimport Slider from '@material-ui/core/Slider';\nimport Select from '@material-ui/core/Select';\n\nconst getCalculateNewValues = (key, value, values) => {\n  const newValues = _Object$assign({}, values, {\n    [key]: value\n  }); // All if's here\n\n\n  if (tableValues.d10 && tableValues.d11) {\n    // d12\n    tableValues['d12'] = tableValues.d10 - tableValues.d11;\n  }\n\n  if (tableValues.d21 && tableValues.d22) {\n    // d23\n    tableValues['d23'] = tableValues.d21 - tableValues.d22;\n  }\n\n  if (tableValues.e30 && tableValues.d32) {\n    // e32\n    tableValues['e32'] = tableValues.e30 * tableValues.d32;\n  }\n\n  if (tableValues.e30 && tableValues.d32) {\n    // f32\n    tableValues['f32'] = tableValues.e30 * tableValues.d32;\n  }\n\n  if (tableValues.f32 && tableValues.d32 && tableValues.d34) {\n    // f34\n    tableValues['f34'] = tableValues.f32 / tableValues.d32 * tableValues.d34;\n  }\n\n  if (tableValues.f32 && tableValues.d32 && tableValues.d35) {\n    // f35\n    tableValues['f35'] = tableValues.f32 / tableValues.d32 * tableValues.d35;\n  }\n\n  if (tableValues.f32 && tableValues.d32 && tableValues.d36) {\n    // f36\n    tableValues['f36'] = tableValues.f32 / tableValues.d32 * tableValues.d36;\n  }\n\n  if (tableValues.f32 && tableValues.d32 && tableValues.d37) {\n    // f37\n    tableValues['f37'] = tableValues.f32 / tableValues.d32 * tableValues.d37;\n  }\n\n  if (tableValues.f32 && tableValues.d32 && tableValues.d38) {\n    // f38\n    tableValues['f38'] = tableValues.f32 / tableValues.d32 * tableValues.d38;\n  }\n\n  if (tableValues.f32 && tableValues.d32 && tableValues.d39) {\n    // f39\n    tableValues['f39'] = tableValues.f32 / tableValues.d32 * tableValues.d39;\n  }\n\n  if (tableValues.e30) {\n    // d47\n    tableValues['d47'] = tableValues.e30;\n  }\n\n  if (tableValues.d49) {\n    // d48\n    tableValues['d48'] = tableValues.d49 / 560 / 1000;\n  }\n\n  if (tableValues.e49) {\n    // e48\n    tableValues['e48'] = tableValues.e49 / 560 / 1000;\n  }\n\n  if (tableValues.d11 && tableValues.d23) {\n    // d49 AND e49\n    tableValues['e49'] = tableValues.d11 * tableValues.d23 * 1000;\n  }\n\n  if (tableValues.d49) {\n    // d50 \n    tableValues['d50'] = tableValues.d49 * 0.000330693393472;\n  }\n\n  if (tableValues.e49) {\n    // e50\n    tableValues['e50'] = tableValues.e49 * 0.000330693393472;\n  }\n\n  if (tableValues.d48 && tableValues.d52) {\n    // d51\n    tableValues['d51'] = tableValues.d48 + tableValues.d52;\n  }\n\n  if (tableValues.e48 && tableValues.e52) {\n    // e51\n    tableValues['e51'] = tableValues.e48 + tableValues.e52;\n  }\n\n  if (tableValues.d48 && tableValues.d47) {\n    // d52\n    tableValues['d52'] = tableValues.d48 * (1 / tableValues.d47);\n  }\n\n  if (tableValues.e48 && tableValues.e47) {\n    // e52\n    tableValues['e52'] = tableValues.e48 * (1 / tableValues.e47);\n  } // end\n\n\n  return newValues;\n};\n\nexport const handleInputChange = (event, updateTablesValues) => {\n  const values = {}; // All data here\n\n  const field = event.target.id;\n  const newValue = event.target.value;\n  const newValues = getCalculateNewValues(field, newValue, values);\n  updateTablesValues({\n    values: newValues\n  });\n};\n\nconst handleSelectChange = (event, updateTablesValues) => {\n  updateTablesValues({\n    values: {\n      [event.target.id]: event.target.value\n    }\n  });\n};\n\nconst onChangeSlider = (event, val, location, updateTablesValues) => {\n  updateTablesValues({\n    values: {\n      [location]: val\n    }\n  });\n};\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nconst getMarks = row => {\n  if (!row) return [];\n  let arr = [];\n  let i = row.min;\n\n  while (i <= row.max) {\n    arr.push({\n      value: i\n    });\n    i += row.ticks;\n  } // if we want lables in the  edges of the slider\n  // if (arr.length) { \n  //     debugger\n  //     arr[0].label = row.min.toString()\n  //     arr[arr.length - 1].label = row.max.toString()\n  // }\n\n\n  return arr;\n};\n\nexport const renderValueType = (row, updateTablesValues, tableValues, classes) => {\n  const type = row.type;\n\n  switch (type) {\n    case TYPES.NUMERIC:\n      return __jsx(Input, {\n        id: row.location,\n        label: \"Number\",\n        value: tableValues[row.location] || '',\n        onChange: e => handleInputChange(e, updateTablesValues),\n        type: \"number\",\n        className: classes.textField\n      });\n\n    case TYPES.RANGE:\n      return __jsx(Slider, {\n        defaultValue: Math.floor((row.min + row.max) / 2),\n        getAriaValueText: valuetext,\n        onChange: (e, val) => onChangeSlider(e, val, row.location, updateTablesValues),\n        \"aria-labelledby\": \"discrete-slider-always\",\n        step: row.ticks,\n        min: row.min,\n        max: row.max,\n        marks: getMarks(row),\n        valueLabelDisplay: \"on\"\n      });\n\n    case TYPES.SELECT:\n      return __jsx(Select, {\n        id: row.location,\n        native: true,\n        value: tableValues[row.location],\n        onChange: e => handleSelectChange(e, updateTablesValues)\n      }, row.data.map((item, i) => {\n        return __jsx(\"option\", {\n          key: i,\n          value: item\n        }, item);\n      }));\n\n    case TYPES.NOT_EDITABLE:\n      return __jsx(Input, {\n        id: row.location,\n        value: tableValues[row.location] || '',\n        readOnly: true,\n        className: classes.textFieldUNEditable\n      });\n\n    default:\n      return row.type;\n  }\n};","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\table\\utils.js"],"names":["TYPES","Input","Slider","Select","getCalculateNewValues","key","value","values","newValues","tableValues","d10","d11","d21","d22","e30","d32","f32","d34","d35","d36","d37","d38","d39","d49","e49","d23","d48","d52","e48","e52","d47","e47","handleInputChange","event","updateTablesValues","field","target","id","newValue","handleSelectChange","onChangeSlider","val","location","valuetext","getMarks","row","arr","i","min","max","push","ticks","renderValueType","classes","type","NUMERIC","e","textField","RANGE","Math","floor","SELECT","data","map","item","NOT_EDITABLE","textFieldUNEditable"],"mappings":"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","sourcesContent":["import { TYPES } from 'src/components/data'\r\nimport Input from '@material-ui/core/Input';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst getCalculateNewValues = (key, value, values) => {\r\n    const newValues = Object.assign({}, values, { [key]: value });\r\n    // All if's here\r\n    if (tableValues.d10 && tableValues.d11) { // d12\r\n        tableValues['d12'] = tableValues.d10 - tableValues.d11\r\n    }\r\n    if (tableValues.d21 && tableValues.d22) { // d23\r\n        tableValues['d23'] = tableValues.d21 - tableValues.d22\r\n    }\r\n    if (tableValues.e30 && tableValues.d32) { // e32\r\n        tableValues['e32'] = tableValues.e30 * tableValues.d32\r\n    }\r\n    if (tableValues.e30 && tableValues.d32) { // f32\r\n        tableValues['f32'] = tableValues.e30 * tableValues.d32\r\n    }\r\n    if (tableValues.f32 && tableValues.d32 && tableValues.d34) { // f34\r\n        tableValues['f34'] = tableValues.f32 / tableValues.d32 * tableValues.d34\r\n    }\r\n    if (tableValues.f32 && tableValues.d32 && tableValues.d35) { // f35\r\n        tableValues['f35'] = tableValues.f32 / tableValues.d32 * tableValues.d35\r\n    }\r\n    if (tableValues.f32 && tableValues.d32 && tableValues.d36) { // f36\r\n        tableValues['f36'] = tableValues.f32 / tableValues.d32 * tableValues.d36\r\n    }\r\n    if (tableValues.f32 && tableValues.d32 && tableValues.d37) { // f37\r\n        tableValues['f37'] = tableValues.f32 / tableValues.d32 * tableValues.d37\r\n    }\r\n    if (tableValues.f32 && tableValues.d32 && tableValues.d38) { // f38\r\n        tableValues['f38'] = tableValues.f32 / tableValues.d32 * tableValues.d38\r\n    }\r\n    if (tableValues.f32 && tableValues.d32 && tableValues.d39) { // f39\r\n        tableValues['f39'] = tableValues.f32 / tableValues.d32 * tableValues.d39\r\n    }\r\n    if (tableValues.e30) { // d47\r\n        tableValues['d47'] = tableValues.e30\r\n    }\r\n    if (tableValues.d49) { // d48\r\n        tableValues['d48'] = tableValues.d49 / 560 / 1000\r\n    }\r\n    if (tableValues.e49) { // e48\r\n        tableValues['e48'] = tableValues.e49 / 560 / 1000\r\n    }\r\n    if (tableValues.d11 && tableValues.d23) { // d49 AND e49\r\n        tableValues['e49'] = tableValues.d11 * tableValues.d23 * 1000\r\n    }\r\n    if (tableValues.d49) { // d50 \r\n        tableValues['d50'] = tableValues.d49 * 0.000330693393472\r\n    }\r\n    if (tableValues.e49) { // e50\r\n        tableValues['e50'] = tableValues.e49 * 0.000330693393472\r\n    }\r\n    if (tableValues.d48 && tableValues.d52) { // d51\r\n        tableValues['d51'] = tableValues.d48 + tableValues.d52\r\n    }\r\n    if (tableValues.e48 && tableValues.e52) { // e51\r\n        tableValues['e51'] = tableValues.e48 + tableValues.e52\r\n    }\r\n    if (tableValues.d48 && tableValues.d47) { // d52\r\n        tableValues['d52'] = tableValues.d48 * (1 / tableValues.d47)\r\n    }\r\n    if (tableValues.e48 && tableValues.e47) { // e52\r\n        tableValues['e52'] = tableValues.e48 * (1 / tableValues.e47)\r\n    }\r\n    // end\r\n    return newValues\r\n}\r\n\r\nexport const handleInputChange = (event, updateTablesValues) => {\r\n    const values = {}; // All data here\r\n    const field = event.target.id;\r\n    const newValue = event.target.value;\r\n    const newValues = getCalculateNewValues(field, newValue, values)\r\n    updateTablesValues({ values: newValues })\r\n};\r\n\r\nconst handleSelectChange = (event, updateTablesValues) => {\r\n    updateTablesValues({ values: { [event.target.id]: event.target.value } })\r\n};\r\n\r\nconst onChangeSlider = (event, val, location, updateTablesValues) => {\r\n    updateTablesValues({ values: { [location]: val } })\r\n};\r\n\r\n\r\nfunction valuetext(value) {\r\n    return `${value}`;\r\n}\r\n\r\nconst getMarks = (row, ) => {\r\n    if (!row) return [];\r\n    let arr = []\r\n    let i = row.min\r\n    while (i <= row.max) {\r\n        arr.push({ value: i })\r\n        i += row.ticks\r\n    }\r\n    // if we want lables in the  edges of the slider\r\n    // if (arr.length) { \r\n    //     debugger\r\n    //     arr[0].label = row.min.toString()\r\n    //     arr[arr.length - 1].label = row.max.toString()\r\n    // }\r\n    return arr\r\n}\r\n\r\nexport const renderValueType = (row, updateTablesValues, tableValues, classes) => {\r\n    const type = row.type\r\n    switch (type) {\r\n        case TYPES.NUMERIC:\r\n            return <Input\r\n                id={row.location}\r\n                label=\"Number\"\r\n                value={tableValues[row.location] || ''}\r\n                onChange={(e) => handleInputChange(e, updateTablesValues)}\r\n                type=\"number\"\r\n                className={classes.textField}\r\n\r\n            />\r\n        case TYPES.RANGE:\r\n            return <Slider\r\n                defaultValue={Math.floor((row.min + row.max) / 2)}\r\n                getAriaValueText={valuetext}\r\n                onChange={(e, val) => onChangeSlider(e, val, row.location, updateTablesValues)}\r\n                aria-labelledby=\"discrete-slider-always\"\r\n                step={row.ticks}\r\n                min={row.min}\r\n                max={row.max}\r\n                marks={getMarks(row)}\r\n                valueLabelDisplay=\"on\"\r\n            />\r\n        case TYPES.SELECT:\r\n            return <Select\r\n                id={row.location}\r\n                native\r\n                value={tableValues[row.location]}\r\n                onChange={(e) => handleSelectChange(e, updateTablesValues)}\r\n            >\r\n                {row.data.map((item, i) => {\r\n                    return <option key={i} value={item}>{item}</option>\r\n                })}\r\n            </Select>\r\n        case TYPES.NOT_EDITABLE:\r\n            return <Input\r\n                id={row.location}\r\n                value={tableValues[row.location] || ''}\r\n                readOnly\r\n                className={classes.textFieldUNEditable}\r\n            />\r\n        default:\r\n            return row.type\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}