{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateTablesValue);\n\nimport { put } from 'redux-saga/effects'; // import { api, httpRequest, consts, logger } from 'src/logic';\n\nimport { setValues } from \"../actions\";\nexport default function updateTablesValue(action) {\n  var values, res;\n  return _regeneratorRuntime.wrap(function updateTablesValue$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          values = action.payload.values;\n          _context.prev = 1;\n          //     yield put(setRamzorPress({ storeKey, status: consts.API_STATUS.START, error: null, loading: true, data: dataForClient }));\n          //     const res = yield httpRequest(api.request, { url: 'setCompliance', method: 'post', data: dataToSend });\n          //     if (res.error) {\n          //         const errType = res.message === 'Network Error' ? consts.API_STATUS.FAILED_NETWORK : consts.API_STATUS.FAILED;\n          //         yield put(setRamzorPress({ storeKey, status: errType, error: res, loading: false, data: dataForClient }));\n          //     } else {\n          //         yield put(setRamzorPress({\n          //             storeKey, status: consts.API_STATUS.FINISHED, error: null, loading: false, data: dataForClient\n          //         }));\n          //     }\n          res = values;\n          _context.next = 5;\n          return put(setValues({\n            storeKey: storeKey,\n            status: consts.API_STATUS.FINISHED,\n            error: null,\n            loading: false,\n            data: res\n          }));\n\n        case 5:\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n          logger.log('error in onRamzorPress', _context.t0);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 7]]);\n}","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\store\\tables\\workers\\updateTablesValues.js"],"names":["updateTablesValue","put","setValues","action","values","payload","res","storeKey","status","consts","API_STATUS","FINISHED","error","loading","data","logger","log"],"mappings":";;;;yBAIyBA,iB;;AAJzB,SAASC,GAAT,QAAoB,oBAApB,C,CACA;;AACA,SAASC,SAAT;AAEA,eAAe,SAAUF,iBAAV,CAA4BG,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACHC,UAAAA,MADG,GACQD,MAAM,CAACE,OADf,CACHD,MADG;AAAA;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACME,UAAAA,GAbC,GAaKF,MAbL;AAAA;AAcP,iBAAMH,GAAG,CAACC,SAAS,CAAC;AAChBK,YAAAA,QAAQ,EAARA,QADgB;AACNC,YAAAA,MAAM,EAAEC,MAAM,CAACC,UAAP,CAAkBC,QADpB;AAC8BC,YAAAA,KAAK,EAAE,IADrC;AAC2CC,YAAAA,OAAO,EAAE,KADpD;AAC2DC,YAAAA,IAAI,EAAER;AADjE,WAAD,CAAV,CAAT;;AAdO;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBPS,UAAAA,MAAM,CAACC,GAAP,CAAW,wBAAX;;AAlBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put } from 'redux-saga/effects';\r\n// import { api, httpRequest, consts, logger } from 'src/logic';\r\nimport { setValues } from '../actions';\r\n\r\nexport default function* updateTablesValue(action) {\r\n    const { values } = action.payload\r\n    try {\r\n        //     yield put(setRamzorPress({ storeKey, status: consts.API_STATUS.START, error: null, loading: true, data: dataForClient }));\r\n        //     const res = yield httpRequest(api.request, { url: 'setCompliance', method: 'post', data: dataToSend });\r\n        //     if (res.error) {\r\n        //         const errType = res.message === 'Network Error' ? consts.API_STATUS.FAILED_NETWORK : consts.API_STATUS.FAILED;\r\n        //         yield put(setRamzorPress({ storeKey, status: errType, error: res, loading: false, data: dataForClient }));\r\n        //     } else {\r\n        //         yield put(setRamzorPress({\r\n        //             storeKey, status: consts.API_STATUS.FINISHED, error: null, loading: false, data: dataForClient\r\n        //         }));\r\n        //     }\r\n        const res = values\r\n        yield put(setValues({\r\n            storeKey, status: consts.API_STATUS.FINISHED, error: null, loading: false, data: res\r\n        }));\r\n    } catch (err) {\r\n        logger.log('error in onRamzorPress', err);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}