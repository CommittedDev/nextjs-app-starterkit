{"ast":null,"code":"import { put } from 'redux-saga/effects';\nimport { logger } from \"../../../services/logger\";\nimport { setValues } from \"../actions\";\nexport default function* updateTablesValues(action) {\n  const {\n    values\n  } = action.payload;\n  debugger;\n\n  try {\n    //     yield put(setRamzorPress({ storeKey, status: consts.API_STATUS.START, error: null, loading: true, data: dataForClient }));\n    //     const res = yield httpRequest(api.request, { url: 'setCompliance', method: 'post', data: dataToSend });\n    //     if (res.error) {\n    //         const errType = res.message === 'Network Error' ? consts.API_STATUS.FAILED_NETWORK : consts.API_STATUS.FAILED;\n    //         yield put(setRamzorPress({ storeKey, status: errType, error: res, loading: false, data: dataForClient }));\n    //     } else {\n    //         yield put(setRamzorPress({\n    //             storeKey, status: consts.API_STATUS.FINISHED, error: null, loading: false, data: dataForClient\n    //         }));\n    //     }\n    const data = values;\n    yield put(setValues({\n      error: null,\n      loading: false,\n      data\n    }));\n  } catch (err) {\n    console.log('error in onRamzorPress', err);\n  }\n}","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\store\\tables\\workers\\updateTablesValues.js"],"names":["put","logger","setValues","updateTablesValues","action","values","payload","data","error","loading","err","console","log"],"mappings":"AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,SAASC,MAAT;AACA,SAASC,SAAT;AAEA,eAAe,UAAUC,kBAAV,CAA6BC,MAA7B,EAAqC;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAaD,MAAM,CAACE,OAA1B;AACA;;AACA,MAAI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMC,IAAI,GAAGF,MAAb;AACA,UAAML,GAAG,CAACE,SAAS,CAAC;AAChBM,MAAAA,KAAK,EAAE,IADS;AACHC,MAAAA,OAAO,EAAE,KADN;AACaF,MAAAA;AADb,KAAD,CAAV,CAAT;AAGH,GAfD,CAeE,OAAOG,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,GAAtC;AACH;AACJ","sourcesContent":["import { put } from 'redux-saga/effects';\r\nimport { logger } from 'src/services/logger';\r\nimport { setValues } from '../actions';\r\n\r\nexport default function* updateTablesValues(action) {\r\n    const { values } = action.payload\r\n    debugger\r\n    try {\r\n        //     yield put(setRamzorPress({ storeKey, status: consts.API_STATUS.START, error: null, loading: true, data: dataForClient }));\r\n        //     const res = yield httpRequest(api.request, { url: 'setCompliance', method: 'post', data: dataToSend });\r\n        //     if (res.error) {\r\n        //         const errType = res.message === 'Network Error' ? consts.API_STATUS.FAILED_NETWORK : consts.API_STATUS.FAILED;\r\n        //         yield put(setRamzorPress({ storeKey, status: errType, error: res, loading: false, data: dataForClient }));\r\n        //     } else {\r\n        //         yield put(setRamzorPress({\r\n        //             storeKey, status: consts.API_STATUS.FINISHED, error: null, loading: false, data: dataForClient\r\n        //         }));\r\n        //     }\r\n        const data = values\r\n        yield put(setValues({\r\n            error: null, loading: false, data\r\n        }));\r\n    } catch (err) {\r\n        console.log('error in onRamzorPress', err);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}