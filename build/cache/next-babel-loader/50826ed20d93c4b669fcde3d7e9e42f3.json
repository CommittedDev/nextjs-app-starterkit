{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nexport var handleInputChange = function handleInputChange(event, updateTablesValues) {\n  updateTablesValues({\n    values: _defineProperty({}, event.target.id, event.target.value)\n  });\n};\nexport var handleSelectChange = function handleSelectChange(event, updateTablesValues) {\n  updateTablesValues({\n    values: _defineProperty({}, event.target.id, event.target.value)\n  });\n};\nexport var onChangeSlider = function onChangeSlider(event, val, location, updateTablesValues) {\n  updateTablesValues({\n    values: _defineProperty({}, location, val)\n  });\n};\nexport function valuetext(value) {\n  return \"\".concat(value);\n}\nexport var getMarks = function getMarks(row) {\n  if (!row) return [];\n  var arr = [];\n  var i = row.min;\n\n  while (i <= row.max) {\n    arr.push({\n      value: i\n    });\n    i += row.ticks;\n  } // if we want lables in the  edges of the slider\n  // if (arr.length) { \n  //     debugger\n  //     arr[0].label = row.min.toString()\n  //     arr[arr.length - 1].label = row.max.toString()\n  // }\n\n\n  return arr;\n};\nexport var renderValueType = function renderValueType(row) {\n  switch (row.type) {\n    case TYPES.NUMERIC:\n      return __jsx(Input, {\n        id: row.location,\n        label: \"Number\",\n        value: tableValues[row.location] || '',\n        onChange: function onChange(e) {\n          return handleInputChange(e, updateTablesValues);\n        },\n        type: \"number\",\n        className: classes.textField\n      });\n\n    case TYPES.RANGE:\n      return __jsx(Slider, {\n        defaultValue: Math.floor((row.min + row.max) / 2),\n        getAriaValueText: valuetext,\n        onChange: function onChange(e, val) {\n          return onChangeSlider(e, val, row.location, updateTablesValues);\n        },\n        \"aria-labelledby\": \"discrete-slider-always\",\n        step: row.ticks,\n        min: row.min,\n        max: row.max,\n        marks: getMarks(row),\n        valueLabelDisplay: \"on\"\n      });\n\n    case TYPES.SELECT:\n      return __jsx(Select, {\n        id: row.location,\n        \"native\": true,\n        value: tableValues[row.location],\n        onChange: function onChange(e) {\n          return handleSelectChange(e, updateTablesValues);\n        }\n      }, row.data.map(function (item, i) {\n        return __jsx(\"option\", {\n          key: i,\n          value: item\n        }, item);\n      }));\n\n    case TYPES.NOT_EDITABLE:\n      return __jsx(Input, {\n        id: row.location,\n        value: tableValues[row.location] || '',\n        readOnly: true,\n        className: classes.textField\n      });\n\n    default:\n      return row.type;\n  }\n};","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\table\\utils.js"],"names":["handleInputChange","event","updateTablesValues","values","target","id","value","handleSelectChange","onChangeSlider","val","location","valuetext","getMarks","row","arr","i","min","max","push","ticks","renderValueType","type","TYPES","NUMERIC","tableValues","e","classes","textField","RANGE","Math","floor","SELECT","data","map","item","NOT_EDITABLE"],"mappings":"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","sourcesContent":["\r\nexport const handleInputChange = (event, updateTablesValues) => {\r\n    updateTablesValues({ values: { [event.target.id]: event.target.value } })\r\n};\r\n\r\nexport const handleSelectChange = (event, updateTablesValues) => {\r\n    updateTablesValues({ values: { [event.target.id]: event.target.value } })\r\n};\r\n\r\nexport const onChangeSlider = (event, val, location, updateTablesValues) => {\r\n    updateTablesValues({ values: { [location]: val } })\r\n};\r\n\r\nexport function valuetext(value) {\r\n    return `${value}`;\r\n}\r\n\r\nexport const getMarks = (row, ) => {\r\n    if (!row) return [];\r\n    let arr = []\r\n    let i = row.min\r\n    while (i <= row.max) {\r\n        arr.push({ value: i })\r\n        i += row.ticks\r\n    }\r\n    // if we want lables in the  edges of the slider\r\n    // if (arr.length) { \r\n    //     debugger\r\n    //     arr[0].label = row.min.toString()\r\n    //     arr[arr.length - 1].label = row.max.toString()\r\n    // }\r\n    return arr\r\n}\r\n\r\nexport const renderValueType = (row) => {\r\n    switch (row.type) {\r\n        case TYPES.NUMERIC:\r\n            return <Input\r\n                id={row.location}\r\n                label=\"Number\"\r\n                value={tableValues[row.location] || ''}\r\n                onChange={(e) => handleInputChange(e, updateTablesValues)}\r\n                type=\"number\"\r\n                className={classes.textField}\r\n\r\n            />\r\n        case TYPES.RANGE:\r\n            return <Slider\r\n                defaultValue={Math.floor((row.min + row.max) / 2)}\r\n                getAriaValueText={valuetext}\r\n                onChange={(e, val) => onChangeSlider(e, val, row.location, updateTablesValues)}\r\n                aria-labelledby=\"discrete-slider-always\"\r\n                step={row.ticks}\r\n                min={row.min}\r\n                max={row.max}\r\n                marks={getMarks(row)}\r\n                valueLabelDisplay=\"on\"\r\n            />\r\n        case TYPES.SELECT:\r\n            return <Select\r\n                id={row.location}\r\n                native\r\n                value={tableValues[row.location]}\r\n                onChange={(e) => handleSelectChange(e, updateTablesValues)}\r\n            >\r\n                {row.data.map((item, i) => {\r\n                    return <option key={i} value={item}>{item}</option>\r\n                })}\r\n            </Select>\r\n        case TYPES.NOT_EDITABLE:\r\n            return <Input\r\n                id={row.location}\r\n                value={tableValues[row.location] || ''}\r\n                readOnly\r\n                className={classes.textField}\r\n            />\r\n        default:\r\n            return row.type\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}