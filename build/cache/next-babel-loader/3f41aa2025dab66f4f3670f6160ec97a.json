{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { TYPES } from \"./data\";\nimport Input from '@material-ui/core/Input';\nimport Slider from '@material-ui/core/Slider';\nimport Select from '@material-ui/core/Select';\nimport { calculate } from \"./data/tableUtils\";\nconst useStyles = makeStyles(theme => ({\n  root: {// width: '100%',\n    // marginTop: theme.spacing(3),\n    // overflowX: 'auto',\n  },\n  table: {// width: 600,\n  },\n  tableTitle: {\n    fontSize: 20\n  },\n  TableCell: {}\n}));\nexport default function SimpleTable(props) {\n  const {\n    tableTitle,\n    data\n  } = props;\n  const classes = useStyles();\n  const [values, setValues] = React.useState({});\n\n  const updateReadOnlyValues = () => {\n    if (values.d10 && values.d11) {\n      // d12\n      const res = values.d10 - values.d11;\n      setValues(_objectSpread({}, values, {\n        d12: res\n      }));\n    }\n  };\n\n  const handleTextChange = event => {\n    setValues(_objectSpread({}, values, {\n      [event.target.id]: event.target.value\n    }));\n    console.log(' event.target.value', event.target.value);\n    updateReadOnlyValues();\n  };\n\n  function valuetext(value) {\n    return `${value}`;\n  }\n\n  const handleSelectChange = event => {\n    setValues(_objectSpread({}, values, {\n      [event.target.id]: event.target.value\n    }));\n    updateReadOnlyValues();\n  };\n\n  const onChangeSlider = (event, val, location) => {\n    setValues(_objectSpread({}, values, {\n      [location]: val\n    }));\n    updateReadOnlyValues();\n  };\n\n  console.log('values', values);\n\n  const getMarks = row => {\n    if (!row) return [];\n    let arr = [];\n    let i = row.min;\n\n    while (i <= row.max) {\n      arr.push({\n        value: i\n      });\n      i += row.ticks;\n    } // if we want lables in the  edges of the slider\n    // if (arr.length) { \n    //     debugger\n    //     arr[0].label = row.min.toString()\n    //     arr[arr.length - 1].label = row.max.toString()\n    // }\n\n\n    return arr;\n  };\n\n  const renderValueType = row => {\n    switch (row.type) {\n      case TYPES.NUMERIC:\n        return __jsx(Input, {\n          id: row.location,\n          label: \"Number\",\n          value: values[row.location] || '',\n          onChange: handleTextChange,\n          type: \"tel\",\n          className: classes.textField\n        });\n\n      case TYPES.RANGE:\n        return __jsx(Slider, {\n          defaultValue: Math.floor((row.min + row.max) / 2),\n          getAriaValueText: valuetext,\n          onChange: (e, val) => onChangeSlider(e, val, row.location),\n          \"aria-labelledby\": \"discrete-slider-always\",\n          step: row.ticks,\n          min: row.min,\n          max: row.max,\n          marks: getMarks(row),\n          valueLabelDisplay: \"on\"\n        });\n\n      case TYPES.SELECT:\n        return __jsx(Select, {\n          id: row.location,\n          native: true,\n          value: values[row.location],\n          onChange: handleSelectChange // inputProps={{\n          //     name: 'age',\n          //     // id: 'age-native-simple',\n          // }}\n\n        }, row.data.map((item, i) => {\n          return __jsx(\"option\", {\n            key: i,\n            value: item\n          }, item);\n        }));\n\n      case TYPES.NOT_EDITABLE:\n        return __jsx(Input, {\n          id: row.location,\n          value: values[row.location] || '',\n          readOnly: true,\n          className: classes.textField\n        });\n\n      default:\n        return row.type;\n    }\n  };\n\n  const renderTableData = () => {\n    if (!data) return __jsx(TableRow, null, __jsx(TableCell, {\n      align: \"left\",\n      className: classes.TableCell\n    }, \"no data\"));\n    return data.map(row => __jsx(TableRow, {\n      key: row.name\n    }, __jsx(TableCell, {\n      align: \"left\",\n      className: classes.TableCell\n    }, row.name), __jsx(TableCell, {\n      align: \"left\"\n    }, row.value), __jsx(TableCell, {\n      align: \"left\"\n    }, renderValueType(row))));\n  };\n\n  console.log('data', data);\n  return __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Table, {\n    className: classes.table\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n    className: classes.tableTitle,\n    align: \"left\"\n  }, tableTitle), __jsx(TableCell, {\n    align: \"left\"\n  }, \"Value\"), __jsx(TableCell, {\n    align: \"left\"\n  }, \"Units\"))), __jsx(TableBody, null, renderTableData())));\n}","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\Table.js"],"names":["React","useEffect","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","TYPES","Input","Slider","Select","calculate","useStyles","theme","root","table","tableTitle","fontSize","SimpleTable","props","data","classes","values","setValues","useState","updateReadOnlyValues","d10","d11","res","d12","handleTextChange","event","target","id","value","console","log","valuetext","handleSelectChange","onChangeSlider","val","location","getMarks","row","arr","i","min","max","push","ticks","renderValueType","type","NUMERIC","textField","RANGE","Math","floor","e","SELECT","map","item","NOT_EDITABLE","renderTableData","name"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { TYPES } from 'src/components/data'\r\nimport Input from '@material-ui/core/Input';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\nimport { calculate } from 'src/components/data/tableUtils';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    }\r\n}));\r\n\r\n\r\nexport default function SimpleTable(props) {\r\n    const { tableTitle, data } = props\r\n    const classes = useStyles();\r\n\r\n    const [values, setValues] = React.useState({});\r\n\r\n    const updateReadOnlyValues = () => {\r\n        if (values.d10 && values.d11) { // d12\r\n            const res = values.d10 - values.d11\r\n            setValues({ ...values, d12: res });\r\n        }\r\n    }\r\n\r\n    const handleTextChange = event => {\r\n        setValues({ ...values, [event.target.id]: event.target.value });\r\n        console.log(' event.target.value', event.target.value);\r\n\r\n        updateReadOnlyValues()\r\n    };\r\n    function valuetext(value) {\r\n        return `${value}`;\r\n    }\r\n\r\n    const handleSelectChange = event => {\r\n        setValues({ ...values, [event.target.id]: event.target.value });\r\n        updateReadOnlyValues()\r\n    };\r\n    const onChangeSlider = (event, val, location) => {\r\n        setValues({ ...values, [location]: val });\r\n        updateReadOnlyValues()\r\n    };\r\n\r\n    console.log('values', values)\r\n\r\n    const getMarks = (row) => {\r\n        if (!row) return [];\r\n        let arr = []\r\n        let i = row.min\r\n        while (i <= row.max) {\r\n            arr.push({ value: i })\r\n            i += row.ticks\r\n        }\r\n        // if we want lables in the  edges of the slider\r\n        // if (arr.length) { \r\n        //     debugger\r\n        //     arr[0].label = row.min.toString()\r\n        //     arr[arr.length - 1].label = row.max.toString()\r\n        // }\r\n        return arr\r\n    }\r\n\r\n    const renderValueType = (row) => {\r\n        switch (row.type) {\r\n            case TYPES.NUMERIC:\r\n                return <Input\r\n                    id={row.location}\r\n                    label=\"Number\"\r\n                    value={values[row.location] || ''}\r\n                    onChange={handleTextChange}\r\n                    type=\"tel\"\r\n                    className={classes.textField}\r\n\r\n                />\r\n            case TYPES.RANGE:\r\n                return <Slider\r\n                    defaultValue={Math.floor((row.min + row.max) / 2)}\r\n                    getAriaValueText={valuetext}\r\n                    onChange={(e, val) => onChangeSlider(e, val, row.location)}\r\n                    aria-labelledby=\"discrete-slider-always\"\r\n                    step={row.ticks}\r\n                    min={row.min}\r\n                    max={row.max}\r\n                    marks={getMarks(row)}\r\n                    valueLabelDisplay=\"on\"\r\n                />\r\n            case TYPES.SELECT:\r\n                return <Select\r\n                    id={row.location}\r\n                    native\r\n                    value={values[row.location]}\r\n                    onChange={handleSelectChange}\r\n                // inputProps={{\r\n                //     name: 'age',\r\n                //     // id: 'age-native-simple',\r\n                // }}\r\n                >\r\n                    {row.data.map((item, i) => {\r\n                        return <option key={i} value={item}>{item}</option>\r\n                    })}\r\n                </Select>\r\n            case TYPES.NOT_EDITABLE:\r\n                return <Input\r\n                    id={row.location}\r\n                    value={values[row.location] || ''}\r\n                    readOnly\r\n                    className={classes.textField}\r\n                />\r\n            default:\r\n                return row.type\r\n        }\r\n    }\r\n\r\n    const renderTableData = () => {\r\n        if (!data) return (\r\n            <TableRow>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    no data\r\n                </TableCell>\r\n            </TableRow>\r\n        )\r\n        return data.map(row => (\r\n            <TableRow key={row.name}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n                <TableCell align=\"left\">{row.value}</TableCell>\r\n                <TableCell align=\"left\">{renderValueType(row)}</TableCell>\r\n            </TableRow>\r\n        ))\r\n    }\r\n    console.log('data', data);\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className={classes.tableTitle} align=\"left\">{tableTitle}</TableCell>\r\n                        <TableCell align=\"left\">Value</TableCell>\r\n                        <TableCell align=\"left\">Units</TableCell>\r\n\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}