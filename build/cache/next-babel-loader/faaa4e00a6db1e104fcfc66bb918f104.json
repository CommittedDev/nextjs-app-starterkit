{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { TYPES } from \"./data\";\nimport Input from '@material-ui/core/Input';\nimport Slider from '@material-ui/core/Slider';\nimport Select from '@material-ui/core/Select';\nconst useStyles = makeStyles(theme => ({\n  root: {// width: '100%',\n    // marginTop: theme.spacing(3),\n    // overflowX: 'auto',\n  },\n  table: {// width: 600,\n  },\n  tableTitle: {\n    fontSize: 20\n  },\n  TableCell: {}\n}));\nexport default function SimpleTable(props) {\n  const {\n    tableTitle,\n    data\n  } = props;\n  const classes = useStyles();\n  const [values, setValues] = React.useState({});\n\n  const handleTextChange = () => event => {\n    setValues(_objectSpread({}, values, {\n      [event.target.id]: event.target.value\n    }));\n  };\n\n  function valuetext(value) {\n    return `${value}`;\n  }\n\n  const handleSelectChange = event => {\n    //continue here\n    setValues(_objectSpread({}, values, {\n      [event.target.id]: event.target.value\n    }));\n  };\n\n  const onChangeSlider = (event, val) => {\n    //continue here\n    console.log('event', event);\n    console.log('val', val); // setValues({ ...values, [name]: event.target.value });\n  };\n\n  const marks = [{\n    value: 0,\n    label: '0째C'\n  }, {\n    value: 20 // label: '20째C',\n\n  }, {\n    value: 37 // label: '37째C',\n\n  }, {\n    value: 100,\n    label: '100째C'\n  }];\n  console.log('values', values);\n\n  const getMarks = () => {\n    let arr = [];\n\n    for (let index = data.min; index <= data.max; index + data.ticks) {\n      arr.push({\n        value: index\n      });\n    }\n\n    if (arr.length) {\n      arr[0].label = data.min.toString();\n      arr[arr.length - 1].label = data.max.toString();\n    }\n\n    return arr;\n  };\n\n  const renderValueType = row => {\n    switch (row.type) {\n      case TYPES.NUMERIC:\n        return __jsx(Input, {\n          id: row.location,\n          label: \"Number\",\n          value: values[row.location],\n          onChange: handleTextChange(),\n          type: \"tel\",\n          className: classes.textField\n        });\n\n      case TYPES.RANGE:\n        return __jsx(Slider, {\n          defaultValue: row.max / 2,\n          getAriaValueText: valuetext,\n          onChange: onChangeSlider,\n          \"aria-labelledby\": \"discrete-slider-always\",\n          step: row.ticks,\n          min: row.min,\n          max: row.max // marks={getMarks()}\n          ,\n          valueLabelDisplay: \"on\"\n        });\n\n      case TYPES.SELECT:\n        return __jsx(Select, {\n          id: row.location,\n          native: true,\n          value: values[row.location],\n          onChange: handleSelectChange // inputProps={{\n          //     name: 'age',\n          //     // id: 'age-native-simple',\n          // }}\n\n        }, row.data.map((item, i) => {\n          return __jsx(\"option\", {\n            key: i,\n            value: item\n          }, item);\n        }));\n\n      default:\n        return row.type;\n    }\n  };\n\n  const renderTableData = () => {\n    return data.map(row => __jsx(TableRow, {\n      key: row.name\n    }, __jsx(TableCell, {\n      align: \"left\",\n      className: classes.TableCell\n    }, row.name), __jsx(TableCell, {\n      align: \"left\"\n    }, row.value), __jsx(TableCell, {\n      align: \"left\"\n    }, renderValueType(row))));\n  };\n\n  console.log('data', data);\n  if (!data) return __jsx(\"div\", null, \"no data\");\n  return __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Table, {\n    className: classes.table\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n    className: classes.tableTitle,\n    align: \"left\"\n  }, tableTitle), __jsx(TableCell, {\n    align: \"left\"\n  }, \"Value\"), __jsx(TableCell, {\n    align: \"left\"\n  }, \"Units\"))), __jsx(TableBody, null, renderTableData())));\n}","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\Table.js"],"names":["React","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","TYPES","Input","Slider","Select","useStyles","theme","root","table","tableTitle","fontSize","SimpleTable","props","data","classes","values","setValues","useState","handleTextChange","event","target","id","value","valuetext","handleSelectChange","onChangeSlider","val","console","log","marks","label","getMarks","arr","index","min","max","ticks","push","length","toString","renderValueType","row","type","NUMERIC","location","textField","RANGE","SELECT","map","item","i","renderTableData","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { TYPES } from 'src/components/data'\r\nimport Input from '@material-ui/core/Input';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    }\r\n}));\r\n\r\n\r\nexport default function SimpleTable(props) {\r\n    const { tableTitle, data } = props\r\n    const classes = useStyles();\r\n\r\n    const [values, setValues] = React.useState({});\r\n\r\n    const handleTextChange = () => event => {\r\n        setValues({ ...values, [event.target.id]: event.target.value });\r\n    };\r\n    function valuetext(value) {\r\n        return `${value}`;\r\n    }\r\n\r\n    const handleSelectChange = event => { //continue here\r\n        setValues({ ...values, [event.target.id]: event.target.value });\r\n    };\r\n    const onChangeSlider = (event, val, ) => { //continue here\r\n        console.log('event', event);\r\n        console.log('val', val);\r\n\r\n        // setValues({ ...values, [name]: event.target.value });\r\n    };\r\n\r\n    const marks = [\r\n        {\r\n            value: 0,\r\n            label: '0째C',\r\n        },\r\n        {\r\n            value: 20,\r\n            // label: '20째C',\r\n        },\r\n        {\r\n            value: 37,\r\n            // label: '37째C',\r\n        },\r\n        {\r\n            value: 100,\r\n            label: '100째C',\r\n        },\r\n    ];\r\n    console.log('values', values)\r\n\r\n    const getMarks = () => {\r\n        let arr = []\r\n        for (let index = data.min; index <= data.max; index + data.ticks) {\r\n            arr.push({ value: index })\r\n        }\r\n        if (arr.length) {\r\n            arr[0].label = data.min.toString()\r\n            arr[arr.length - 1].label = data.max.toString()\r\n        }\r\n        return arr\r\n    }\r\n    const renderValueType = (row) => {\r\n        switch (row.type) {\r\n            case TYPES.NUMERIC:\r\n                return <Input\r\n                    id={row.location}\r\n                    label=\"Number\"\r\n                    value={values[row.location]}\r\n                    onChange={handleTextChange()}\r\n                    type=\"tel\"\r\n                    className={classes.textField}\r\n\r\n                />\r\n            case TYPES.RANGE:\r\n                return <Slider\r\n                    defaultValue={row.max / 2}\r\n                    getAriaValueText={valuetext}\r\n                    onChange={onChangeSlider}\r\n                    aria-labelledby=\"discrete-slider-always\"\r\n                    step={row.ticks}\r\n                    min={row.min}\r\n                    max={row.max}\r\n                    // marks={getMarks()}\r\n                    valueLabelDisplay=\"on\"\r\n                />\r\n            case TYPES.SELECT:\r\n                return <Select\r\n                    id={row.location}\r\n                    native\r\n                    value={values[row.location]}\r\n                    onChange={handleSelectChange}\r\n                // inputProps={{\r\n                //     name: 'age',\r\n                //     // id: 'age-native-simple',\r\n                // }}\r\n                >\r\n                    {row.data.map((item, i) => {\r\n                        return <option key={i} value={item}>{item}</option>\r\n                    })}\r\n                    {/* <option value=\"\" />\r\n                    <option value={item}>{item}</option>\r\n                    <option value={item}>{item}</option> */}\r\n                </Select>\r\n\r\n\r\n            default:\r\n                return row.type\r\n        }\r\n    }\r\n\r\n    const renderTableData = () => {\r\n        return data.map(row => (\r\n            <TableRow key={row.name}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n                <TableCell align=\"left\">{row.value}</TableCell>\r\n                <TableCell align=\"left\">{renderValueType(row)}</TableCell>\r\n            </TableRow>\r\n        ))\r\n    }\r\n    console.log('data', data);\r\n    if (!data) return <div>no data</div>\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className={classes.tableTitle} align=\"left\">{tableTitle}</TableCell>\r\n                        <TableCell align=\"left\">Value</TableCell>\r\n                        <TableCell align=\"left\">Units</TableCell>\r\n\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}