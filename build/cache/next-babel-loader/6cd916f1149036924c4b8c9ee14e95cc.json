{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { TYPES } from \"../data\";\nimport Input from '@material-ui/core/Input';\nimport Slider from '@material-ui/core/Slider';\nimport Select from '@material-ui/core/Select';\nimport PropTypes from 'prop-types'; // import { calculate } from 'src/components/data/tableUtils';\n\nimport connect from \"./connect\";\nconst useStyles = makeStyles(theme => ({\n  root: {// width: '100%',\n    // marginTop: theme.spacing(3),\n    // overflowX: 'auto',\n  },\n  table: {// width: 600,\n  },\n  tableTitle: {\n    fontSize: 20\n  },\n  TableCell: {}\n}));\n\nfunction SimpleTable(props) {\n  const {\n    tableTitle,\n    data,\n    units\n  } = props;\n  const classes = useStyles();\n  console.log(`props of ${tableTitle}`, props.tablesData);\n  const tableValues = props.tablesData;\n  const influencingValues = [tableValues.d10, tableValues.d11, tableValues.d21, tableValues.d22];\n  useEffect(() => {\n    updateReadOnlyValues();\n  }, influencingValues);\n\n  const updateReadOnlyValues = () => {\n    if (tableValues.d10 && tableValues.d11) {\n      // d12\n      const res = tableValues.d10 - tableValues.d11;\n      props.actions.updateTablesValues({\n        values: {\n          d12: res\n        }\n      });\n    }\n\n    if (tableValues.d21 && tableValues.d22) {\n      // d23\n      const res = tableValues.d21 - tableValues.d22;\n      props.actions.updateTablesValues({\n        values: {\n          d23: res\n        }\n      });\n    }\n  };\n\n  const handleInputChange = event => {\n    props.actions.updateTablesValues({\n      values: {\n        [event.target.id]: event.target.value\n      }\n    });\n  };\n\n  const handleSelectChange = event => {\n    props.actions.updateTablesValues({\n      values: {\n        [event.target.id]: event.target.value\n      }\n    });\n  };\n\n  const onChangeSlider = (event, val, location) => {\n    props.actions.updateTablesValues({\n      values: {\n        [location]: val\n      }\n    });\n  };\n\n  function valuetext(value) {\n    return `${value}`;\n  }\n\n  const getMarks = row => {\n    if (!row) return [];\n    let arr = [];\n    let i = row.min;\n\n    while (i <= row.max) {\n      arr.push({\n        value: i\n      });\n      i += row.ticks;\n    } // if we want lables in the  edges of the slider\n    // if (arr.length) { \n    //     debugger\n    //     arr[0].label = row.min.toString()\n    //     arr[arr.length - 1].label = row.max.toString()\n    // }\n\n\n    return arr;\n  };\n\n  const renderValueType = row => {\n    switch (row.type) {\n      case TYPES.NUMERIC:\n        return __jsx(Input, {\n          id: row.location,\n          label: \"Number\",\n          value: tableValues[row.location] || '',\n          onChange: handleInputChange,\n          type: \"number\",\n          className: classes.textField\n        });\n\n      case TYPES.RANGE:\n        return __jsx(Slider, {\n          defaultValue: Math.floor((row.min + row.max) / 2),\n          getAriaValueText: valuetext,\n          onChange: (e, val) => onChangeSlider(e, val, row.location),\n          \"aria-labelledby\": \"discrete-slider-always\",\n          step: row.ticks,\n          min: row.min,\n          max: row.max,\n          marks: getMarks(row),\n          valueLabelDisplay: \"on\"\n        });\n\n      case TYPES.SELECT:\n        return __jsx(Select, {\n          id: row.location,\n          native: true,\n          value: tableValues[row.location],\n          onChange: handleSelectChange\n        }, row.data.map((item, i) => {\n          return __jsx(\"option\", {\n            key: i,\n            value: item\n          }, item);\n        }));\n\n      case TYPES.NOT_EDITABLE:\n        return __jsx(Input, {\n          id: row.location,\n          value: tableValues[row.location] || '',\n          readOnly: true,\n          className: classes.textField\n        });\n\n      default:\n        return row.type;\n    }\n  };\n\n  const renderTableData = () => {\n    if (!data) return __jsx(TableRow, null, __jsx(TableCell, {\n      align: \"left\",\n      className: classes.TableCell\n    }, \"no data\"));\n    return data.map(row => __jsx(TableRow, {\n      key: row.location\n    }, __jsx(TableCell, {\n      align: \"left\",\n      className: classes.TableCell\n    }, row.name), __jsx(TableCell, {\n      align: \"left\"\n    }, row.value), __jsx(TableCell, {\n      align: \"left\"\n    }, renderValueType(row))));\n  };\n\n  return __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Table, {\n    className: classes.table\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n    className: classes.tableTitle,\n    align: \"left\"\n  }, tableTitle), __jsx(TableCell, {\n    align: \"left\"\n  }, \"Value\"), units && __jsx(TableCell, {\n    align: \"left\"\n  }, \"Units\")), __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"left\"\n  }, \"Option List\"), __jsx(TableCell, {\n    align: \"left\"\n  }, \"Mark if applicable\"))), __jsx(TableBody, null, renderTableData())));\n}\n\nSimpleTable.defaultProps = {\n  units: true\n};\nSimpleTable.propTypes = {\n  units: PropTypes.bool\n};\nexport default connect(SimpleTable);","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\table\\Table.js"],"names":["React","useEffect","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","TYPES","Input","Slider","Select","PropTypes","connect","useStyles","theme","root","table","tableTitle","fontSize","SimpleTable","props","data","units","classes","console","log","tablesData","tableValues","influencingValues","d10","d11","d21","d22","updateReadOnlyValues","res","actions","updateTablesValues","values","d12","d23","handleInputChange","event","target","id","value","handleSelectChange","onChangeSlider","val","location","valuetext","getMarks","row","arr","i","min","max","push","ticks","renderValueType","type","NUMERIC","textField","RANGE","Math","floor","e","SELECT","map","item","NOT_EDITABLE","renderTableData","name","defaultProps","propTypes","bool"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { TYPES } from 'src/components/data'\r\nimport Input from '@material-ui/core/Input';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\nimport PropTypes from 'prop-types';\r\n// import { calculate } from 'src/components/data/tableUtils';\r\nimport connect from './connect'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    }\r\n}));\r\n\r\nfunction SimpleTable(props) {\r\n    const { tableTitle, data, units } = props\r\n    const classes = useStyles();\r\n\r\n    console.log(`props of ${tableTitle}`, props.tablesData);\r\n\r\n    const tableValues = props.tablesData\r\n    const influencingValues = [tableValues.d10, tableValues.d11, tableValues.d21, tableValues.d22]\r\n    useEffect(() => {\r\n        updateReadOnlyValues()\r\n    }, influencingValues)\r\n\r\n    const updateReadOnlyValues = () => {\r\n        if (tableValues.d10 && tableValues.d11) { // d12\r\n            const res = tableValues.d10 - tableValues.d11\r\n            props.actions.updateTablesValues({ values: { d12: res } })\r\n        }\r\n        if (tableValues.d21 && tableValues.d22) { // d23\r\n            const res = tableValues.d21 - tableValues.d22\r\n            props.actions.updateTablesValues({ values: { d23: res } })\r\n        }\r\n    }\r\n\r\n    const handleInputChange = event => {\r\n        props.actions.updateTablesValues({ values: { [event.target.id]: event.target.value } })\r\n    };\r\n\r\n    const handleSelectChange = event => {\r\n        props.actions.updateTablesValues({ values: { [event.target.id]: event.target.value } })\r\n    };\r\n\r\n    const onChangeSlider = (event, val, location) => {\r\n        props.actions.updateTablesValues({ values: { [location]: val } })\r\n    };\r\n\r\n    function valuetext(value) {\r\n        return `${value}`;\r\n    }\r\n\r\n    const getMarks = (row) => {\r\n        if (!row) return [];\r\n        let arr = []\r\n        let i = row.min\r\n        while (i <= row.max) {\r\n            arr.push({ value: i })\r\n            i += row.ticks\r\n        }\r\n        // if we want lables in the  edges of the slider\r\n        // if (arr.length) { \r\n        //     debugger\r\n        //     arr[0].label = row.min.toString()\r\n        //     arr[arr.length - 1].label = row.max.toString()\r\n        // }\r\n        return arr\r\n    }\r\n\r\n    const renderValueType = (row) => {\r\n        switch (row.type) {\r\n            case TYPES.NUMERIC:\r\n                return <Input\r\n                    id={row.location}\r\n                    label=\"Number\"\r\n                    value={tableValues[row.location] || ''}\r\n                    onChange={handleInputChange}\r\n                    type=\"number\"\r\n                    className={classes.textField}\r\n\r\n                />\r\n            case TYPES.RANGE:\r\n                return <Slider\r\n                    defaultValue={Math.floor((row.min + row.max) / 2)}\r\n                    getAriaValueText={valuetext}\r\n                    onChange={(e, val) => onChangeSlider(e, val, row.location)}\r\n                    aria-labelledby=\"discrete-slider-always\"\r\n                    step={row.ticks}\r\n                    min={row.min}\r\n                    max={row.max}\r\n                    marks={getMarks(row)}\r\n                    valueLabelDisplay=\"on\"\r\n                />\r\n            case TYPES.SELECT:\r\n                return <Select\r\n                    id={row.location}\r\n                    native\r\n                    value={tableValues[row.location]}\r\n                    onChange={handleSelectChange}\r\n                >\r\n                    {row.data.map((item, i) => {\r\n                        return <option key={i} value={item}>{item}</option>\r\n                    })}\r\n                </Select>\r\n            case TYPES.NOT_EDITABLE:\r\n                return <Input\r\n                    id={row.location}\r\n                    value={tableValues[row.location] || ''}\r\n                    readOnly\r\n                    className={classes.textField}\r\n                />\r\n            default:\r\n                return row.type\r\n        }\r\n    }\r\n\r\n    const renderTableData = () => {\r\n        if (!data) return (\r\n            <TableRow>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    no data\r\n                </TableCell>\r\n            </TableRow>\r\n        )\r\n        return data.map(row => (\r\n            <TableRow key={row.location}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n                <TableCell align=\"left\">{row.value}</TableCell>\r\n                <TableCell align=\"left\">{renderValueType(row)}</TableCell>\r\n            </TableRow>\r\n        ))\r\n    }\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell className={classes.tableTitle} align=\"left\">{tableTitle}</TableCell>\r\n                        <TableCell align=\"left\">Value</TableCell>\r\n                        {units && <TableCell align=\"left\">Units</TableCell>}\r\n\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell align=\"left\">Option List</TableCell>\r\n                        <TableCell align=\"left\">Mark if applicable</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nSimpleTable.defaultProps = {\r\n    units: true\r\n  };\r\n\r\nSimpleTable.propTypes = {\r\n    units: PropTypes.bool\r\n  };\r\n\r\nexport default connect(SimpleTable)"]},"metadata":{},"sourceType":"module"}