{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { renderValueType, handleInputChange } from \"./utils\";\nimport Input from '@material-ui/core/Input';\nimport TableTitle from \"./TableTitle\";\nimport HeaderCols from \"./HeaderCols\";\nimport NoDataTableCell from \"./NoDataTableCell\";\nimport WaterAnalysisTitle from \"./WaterAnalysisTitle\";\nimport PropTypes from 'prop-types'; // import { calculate } from 'src/components/data/tableUtils';\n\nimport connect from \"./connect\";\nconst useStyles = makeStyles(theme => ({\n  root: {// width: '100%',\n    // marginTop: theme.spacing(3),\n    // overflowX: 'auto',\n  },\n  table: {// width: 600,\n  },\n  tableTitle: {\n    fontSize: 20\n  },\n  TableCell: {}\n}));\n\nfunction SimpleTable(props) {\n  const {\n    data,\n    headerCols,\n    tableTitle,\n    tablesData,\n    actions\n  } = props;\n  const {\n    updateTablesValues\n  } = actions;\n  const classes = useStyles();\n  console.log(`tablesData`, tablesData);\n  const tableValues = tablesData;\n  const influencingValues = [tableValues.d10, tableValues.d11, tableValues.d21, tableValues.d22, tableValues.e30, tableValues.d32];\n  useEffect(() => {\n    updateReadOnlyValues();\n  }, influencingValues);\n\n  const updateReadOnlyValues = () => {\n    if (tableValues.d10 && tableValues.d11) {\n      // d12\n      const res = tableValues.d10 - tableValues.d11;\n      updateTablesValues({\n        values: {\n          d12: res\n        }\n      });\n    }\n\n    if (tableValues.d21 && tableValues.d22) {\n      // d23\n      const res = tableValues.d21 - tableValues.d22;\n      updateTablesValues({\n        values: {\n          d23: res\n        }\n      });\n    }\n\n    if (tableValues.e30 && tableValues.d32) {\n      // e32\n      const res = tableValues.e30 * tableValues.d32;\n      updateTablesValues({\n        values: {\n          e32: res\n        }\n      });\n    }\n  };\n\n  const renderTableData = () => {\n    if (!data) return __jsx(NoDataTableCell, {\n      className: classes.TableCell\n    });\n    return data.map(row => __jsx(TableRow, {\n      key: row.location\n    }, __jsx(TableCell, {\n      align: \"left\",\n      className: classes.TableCell\n    }, row.name), row.units && __jsx(TableCell, {\n      align: \"left\"\n    }, row.units), row.fields ? row.fields.map(field => {\n      return __jsx(TableCell, {\n        align: \"left\"\n      }, renderValueType(field, updateTablesValues, tableValues, classes));\n    }) : __jsx(TableCell, {\n      align: \"left\"\n    }, renderValueType(row, updateTablesValues, tableValues, classes))));\n  };\n\n  return __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Table, {\n    className: classes.table\n  }, __jsx(TableHead, null, tableTitle && __jsx(TableTitle, {\n    className: classes.tableTitle,\n    tableTitle: tableTitle\n  }), WaterAnalysisTitle && __jsx(WaterAnalysisTitle, {\n    value: tableValues['e30'] || '',\n    handleInputChange: e => handleInputChange(e, updateTablesValues)\n  }), headerCols && __jsx(HeaderCols, {\n    data: headerCols\n  })), __jsx(TableBody, null, renderTableData())));\n} // SimpleTable.defaultProps = {\n//     units: true\n// };\n// SimpleTable.propTypes = {\n//     units: PropTypes.bool\n// };\n\n\nexport default connect(SimpleTable);","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\table\\TableDiffrent.js"],"names":["React","useEffect","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","renderValueType","handleInputChange","Input","TableTitle","HeaderCols","NoDataTableCell","WaterAnalysisTitle","PropTypes","connect","useStyles","theme","root","table","tableTitle","fontSize","SimpleTable","props","data","headerCols","tablesData","actions","updateTablesValues","classes","console","log","tableValues","influencingValues","d10","d11","d21","d22","e30","d32","updateReadOnlyValues","res","values","d12","d23","e32","renderTableData","map","row","location","name","units","fields","field","e"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { renderValueType, handleInputChange } from './utils'\r\nimport Input from '@material-ui/core/Input';\r\nimport TableTitle from 'src/components/table/TableTitle'\r\nimport HeaderCols from 'src/components/table/HeaderCols'\r\nimport NoDataTableCell from 'src/components/table/NoDataTableCell'\r\nimport WaterAnalysisTitle from 'src/components/table/WaterAnalysisTitle'\r\nimport PropTypes from 'prop-types';\r\n// import { calculate } from 'src/components/data/tableUtils';\r\nimport connect from './connect'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    }\r\n}));\r\n\r\nfunction SimpleTable(props) {\r\n    const { data, headerCols, tableTitle, tablesData, actions } = props\r\n    const { updateTablesValues } = actions\r\n    const classes = useStyles();\r\n\r\n    console.log(`tablesData`, tablesData);\r\n\r\n    const tableValues = tablesData\r\n    const influencingValues = [\r\n        tableValues.d10,\r\n        tableValues.d11,\r\n        tableValues.d21,\r\n        tableValues.d22,\r\n        tableValues.e30,\r\n        tableValues.d32\r\n    ]\r\n\r\n    useEffect(() => {\r\n        updateReadOnlyValues()\r\n    }, influencingValues)\r\n\r\n    const updateReadOnlyValues = () => {\r\n        if (tableValues.d10 && tableValues.d11) { // d12\r\n            const res = tableValues.d10 - tableValues.d11\r\n            updateTablesValues({ values: { d12: res } })\r\n        }\r\n        if (tableValues.d21 && tableValues.d22) { // d23\r\n            const res = tableValues.d21 - tableValues.d22\r\n            updateTablesValues({ values: { d23: res } })\r\n        }\r\n        if (tableValues.e30 && tableValues.d32) { // e32\r\n            const res = tableValues.e30 * tableValues.d32\r\n            updateTablesValues({ values: { e32: res } })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        if (!data) return <NoDataTableCell className={classes.TableCell} />\r\n        return data.map(row => (\r\n            <TableRow key={row.location}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n                {row.units && <TableCell align=\"left\">{row.units}</TableCell>}\r\n\r\n                {row.fields\r\n                    ? row.fields.map((field) => {\r\n                        return <TableCell align=\"left\">\r\n                            {renderValueType(field, updateTablesValues, tableValues, classes)}\r\n                        </TableCell>\r\n                    })\r\n                    : <TableCell align=\"left\">{renderValueType(row, updateTablesValues, tableValues, classes)}</TableCell>\r\n                }\r\n            </TableRow>\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    {tableTitle && <TableTitle className={classes.tableTitle} tableTitle={tableTitle} />}\r\n                    {/* happens only in Water Analysis table */}\r\n                    {WaterAnalysisTitle\r\n                        && <WaterAnalysisTitle value={tableValues['e30'] || ''}\r\n                            handleInputChange={(e) => handleInputChange(e, updateTablesValues)} />}\r\n                    {/* ---- */}\r\n                    {headerCols && <HeaderCols data={headerCols} />}\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n// SimpleTable.defaultProps = {\r\n//     units: true\r\n// };\r\n\r\n// SimpleTable.propTypes = {\r\n//     units: PropTypes.bool\r\n// };\r\n\r\nexport default connect(SimpleTable)"]},"metadata":{},"sourceType":"module"}