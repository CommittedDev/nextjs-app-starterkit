{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { renderValueType } from \"./utils\";\nimport Input from '@material-ui/core/Input';\nimport PropTypes from 'prop-types'; // import { calculate } from 'src/components/data/tableUtils';\n\nimport connect from \"./connect\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {// width: '100%',\n      // marginTop: theme.spacing(3),\n      // overflowX: 'auto',\n    },\n    table: {// width: 600,\n    },\n    tableTitle: {\n      fontSize: 20\n    },\n    TableCell: {}\n  };\n});\n\nfunction SimpleTable(props) {\n  var tableTitle = props.tableTitle,\n      data = props.data,\n      headerTitles = props.headerTitles,\n      tableSubTitle = props.tableSubTitle;\n  var classes = useStyles();\n  console.log(\"props of \".concat(tableTitle), props.tablesData);\n  var tableValues = props.tablesData;\n  var influencingValues = [tableValues.d10, tableValues.d11, tableValues.d21, tableValues.d22, tableValues.e30, tableValues.d32];\n  useEffect(function () {\n    updateReadOnlyValues();\n  }, influencingValues);\n\n  var updateReadOnlyValues = function updateReadOnlyValues() {\n    if (tableValues.d10 && tableValues.d11) {\n      // d12\n      var res = tableValues.d10 - tableValues.d11;\n      props.actions.updateTablesValues({\n        values: {\n          d12: res\n        }\n      });\n    }\n\n    if (tableValues.d21 && tableValues.d22) {\n      // d23\n      var _res = tableValues.d21 - tableValues.d22;\n\n      props.actions.updateTablesValues({\n        values: {\n          d23: _res\n        }\n      });\n    }\n\n    if (tableValues.e30 && tableValues.d32) {\n      // e32\n      var _res2 = tableValues.e30 * tableValues.d32;\n\n      props.actions.updateTablesValues({\n        values: {\n          d23: _res2\n        }\n      });\n    }\n  };\n\n  var renderTableData = function renderTableData() {\n    if (!data) return __jsx(TableRow, null, __jsx(TableCell, {\n      align: \"left\",\n      className: classes.TableCell\n    }, \"no data\"));\n    return data.map(function (row) {\n      return __jsx(TableRow, {\n        key: row.location\n      }, __jsx(TableCell, {\n        align: \"left\",\n        className: classes.TableCell\n      }, row.name), __jsx(TableCell, {\n        align: \"left\"\n      }, row.value), row.fields.map(function (field) {\n        return __jsx(TableCell, {\n          align: \"left\"\n        }, renderValueType(field, props.actions.updateTablesValues, tableValues, classes));\n      }));\n    });\n  };\n\n  return __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Table, {\n    className: classes.table\n  }, __jsx(TableHead, null, tableSubTitle && __jsx(TableRow, null, __jsx(TableCell, {\n    className: classes.tableTitle,\n    colSpan: 3,\n    align: \"left\"\n  }, tableSubTitle), __jsx(TableCell, {\n    className: classes.tableTitle,\n    colSpan: 3,\n    align: \"left\"\n  }, __jsx(Input, {\n    id: row.location,\n    label: \"Number\",\n    value: tableValues[row.location] || '',\n    onChange: function onChange(e) {\n      return handleInputChange(e, updateTablesValues);\n    },\n    type: \"number\",\n    className: classes.textField\n  }))), headerTitles ? __jsx(TableRow, null, headerTitles.map(function (title) {\n    return __jsx(TableCell, {\n      key: title,\n      align: \"left\"\n    }, title);\n  })) : __jsx(TableRow, null, __jsx(TableCell, {\n    className: classes.tableTitle,\n    align: \"left\"\n  }, tableTitle), __jsx(TableCell, {\n    align: \"left\"\n  }, \"Value\"), __jsx(TableCell, {\n    align: \"left\"\n  }, \"Units\"))), __jsx(TableBody, null, renderTableData())));\n} // SimpleTable.defaultProps = {\n//     units: true\n// };\n// SimpleTable.propTypes = {\n//     units: PropTypes.bool\n// };\n\n\nexport default connect(SimpleTable);","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\table\\TableDiffrent.js"],"names":["React","useEffect","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","renderValueType","Input","PropTypes","connect","useStyles","theme","root","table","tableTitle","fontSize","SimpleTable","props","data","headerTitles","tableSubTitle","classes","console","log","tablesData","tableValues","influencingValues","d10","d11","d21","d22","e30","d32","updateReadOnlyValues","res","actions","updateTablesValues","values","d12","d23","renderTableData","map","row","location","name","value","fields","field","e","handleInputChange","textField","title"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { renderValueType } from './utils'\r\nimport Input from '@material-ui/core/Input';\r\n\r\nimport PropTypes from 'prop-types';\r\n// import { calculate } from 'src/components/data/tableUtils';\r\nimport connect from './connect'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    }\r\n}));\r\n\r\nfunction SimpleTable(props) {\r\n    const { tableTitle, data, headerTitles, tableSubTitle } = props\r\n    const classes = useStyles();\r\n\r\n    console.log(`props of ${tableTitle}`, props.tablesData);\r\n\r\n    const tableValues = props.tablesData\r\n    const influencingValues = [\r\n        tableValues.d10,\r\n        tableValues.d11,\r\n        tableValues.d21,\r\n        tableValues.d22,\r\n        tableValues.e30,\r\n        tableValues.d32\r\n    ]\r\n\r\n    useEffect(() => {\r\n        updateReadOnlyValues()\r\n    }, influencingValues)\r\n\r\n    const updateReadOnlyValues = () => {\r\n        if (tableValues.d10 && tableValues.d11) { // d12\r\n            const res = tableValues.d10 - tableValues.d11\r\n            props.actions.updateTablesValues({ values: { d12: res } })\r\n        }\r\n        if (tableValues.d21 && tableValues.d22) { // d23\r\n            const res = tableValues.d21 - tableValues.d22\r\n            props.actions.updateTablesValues({ values: { d23: res } })\r\n        }\r\n        if (tableValues.e30 && tableValues.d32) { // e32\r\n            const res = tableValues.e30 * tableValues.d32\r\n            props.actions.updateTablesValues({ values: { d23: res } })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        if (!data) return (\r\n            <TableRow>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    no data\r\n                </TableCell>\r\n            </TableRow>\r\n        )\r\n\r\n\r\n        return data.map(row => (\r\n            <TableRow key={row.location}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n                <TableCell align=\"left\">{row.value}</TableCell>\r\n                {row.fields.map((field) => {\r\n                    return <TableCell align=\"left\">\r\n                        {renderValueType(field, props.actions.updateTablesValues, tableValues, classes)}\r\n                    </TableCell>\r\n                })}\r\n            </TableRow>\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    {tableSubTitle && <TableRow>\r\n                        <TableCell className={classes.tableTitle}\r\n                            colSpan={3}\r\n                            align=\"left\">\r\n                            {tableSubTitle}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableTitle}\r\n                            colSpan={3}\r\n                            align=\"left\">\r\n                            <Input\r\n                                id={row.location}\r\n                                label=\"Number\"\r\n                                value={tableValues[row.location] || ''}\r\n                                onChange={(e) => handleInputChange(e, updateTablesValues)}\r\n                                type=\"number\"\r\n                                className={classes.textField}\r\n                            />\r\n                        </TableCell>\r\n                    </TableRow>}\r\n                    {headerTitles\r\n                        ? <TableRow>\r\n                            {headerTitles.map((title) => {\r\n                                return <TableCell key={title} align=\"left\">{title}</TableCell>\r\n                            })}\r\n                        </TableRow>\r\n                        : <TableRow>\r\n                            <TableCell className={classes.tableTitle} align=\"left\">{tableTitle}</TableCell>\r\n                            <TableCell align=\"left\">Value</TableCell>\r\n                            <TableCell align=\"left\">Units</TableCell>\r\n                        </TableRow>}\r\n\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n// SimpleTable.defaultProps = {\r\n//     units: true\r\n// };\r\n\r\n// SimpleTable.propTypes = {\r\n//     units: PropTypes.bool\r\n// };\r\n\r\nexport default connect(SimpleTable)"]},"metadata":{},"sourceType":"module"}