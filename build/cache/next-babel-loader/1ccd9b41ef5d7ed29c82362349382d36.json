{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { renderValueType, handleInputChange as _handleInputChange } from \"./utils\";\nimport Input from '@material-ui/core/Input';\nimport TableTitle from \"./TableTitle\";\nimport HeaderCols from \"./HeaderCols\";\nimport NoDataTableCell from \"./NoDataTableCell\";\nimport WaterAnalysisTitle from \"./WaterAnalysisTitle\";\nimport PropTypes from 'prop-types'; // import { calculate } from 'src/components/data/tableUtils';\n\nimport connect from \"./connect\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {// width: '100%',\n      // marginTop: theme.spacing(3),\n      // overflowX: 'auto',\n    },\n    table: {// width: 600,\n    },\n    tableTitle: {\n      fontSize: 20\n    },\n    TableCell: {}\n  };\n});\n\nfunction SimpleTable(props) {\n  var data = props.data,\n      headerCols = props.headerCols,\n      tableTitle = props.tableTitle,\n      tablesData = props.tablesData,\n      waterAnalysisTitle = props.waterAnalysisTitle,\n      actions = props.actions;\n  var updateTablesValues = actions.updateTablesValues;\n  var classes = useStyles();\n  console.log(\"tablesData\", tablesData);\n  var tableValues = tablesData;\n  var influencingValues = [tableValues.d10, tableValues.d11, tableValues.d21, tableValues.d22, tableValues.e30, tableValues.d32, tableValues.f32, tableValues.d34];\n  useEffect(function () {\n    updateReadOnlyValues();\n  }, influencingValues);\n\n  var updateReadOnlyValues = function updateReadOnlyValues() {\n    if (tableValues.d10 && tableValues.d11) {\n      // d12\n      var res = tableValues.d10 - tableValues.d11;\n      updateTablesValues({\n        values: {\n          d12: res\n        }\n      });\n    }\n\n    if (tableValues.d21 && tableValues.d22) {\n      // d23\n      var _res = tableValues.d21 - tableValues.d22;\n\n      updateTablesValues({\n        values: {\n          d23: _res\n        }\n      });\n    }\n\n    if (tableValues.e30 && tableValues.d32) {\n      // e32\n      var _res2 = tableValues.e30 * tableValues.d32;\n\n      updateTablesValues({\n        values: {\n          e32: _res2\n        }\n      });\n    }\n\n    if (tableValues.e30 && tableValues.d32) {\n      // f32\n      var _res3 = tableValues.e30 * tableValues.d32;\n\n      updateTablesValues({\n        values: {\n          f32: _res3\n        }\n      });\n    }\n\n    if (tableValues.f32 && tableValues.d32 && tableValues.d34) {\n      // f34\n      var _res4 = tableValues.f32 / tableValues.d32 * tableValues.d34;\n\n      updateTablesValues({\n        values: {\n          f34: _res4\n        }\n      });\n    }\n  };\n\n  var renderTableData = function renderTableData() {\n    if (!data) return __jsx(NoDataTableCell, {\n      className: classes.TableCell\n    });\n    return data.map(function (row) {\n      return __jsx(TableRow, {\n        key: row.location\n      }, __jsx(TableCell, {\n        align: \"left\",\n        className: classes.TableCell\n      }, row.name), row.units && __jsx(TableCell, {\n        align: \"left\"\n      }, row.units), row.fields ? row.fields.map(function (field) {\n        return __jsx(TableCell, {\n          align: \"left\"\n        }, renderValueType(field, updateTablesValues, tableValues, classes));\n      }) : __jsx(TableCell, {\n        align: \"left\"\n      }, renderValueType(row, updateTablesValues, tableValues, classes)));\n    });\n  };\n\n  return __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Table, {\n    className: classes.table\n  }, __jsx(TableHead, null, tableTitle && __jsx(TableTitle, {\n    className: classes.tableTitle,\n    tableTitle: tableTitle\n  }), waterAnalysisTitle && __jsx(WaterAnalysisTitle, {\n    value: tableValues['e30'] || '',\n    handleInputChange: function handleInputChange(e) {\n      return _handleInputChange(e, updateTablesValues);\n    }\n  }), headerCols && __jsx(HeaderCols, {\n    data: headerCols\n  })), __jsx(TableBody, null, renderTableData())));\n} // SimpleTable.defaultProps = {\n//     units: true\n// };\n// SimpleTable.propTypes = {\n//     units: PropTypes.bool\n// };\n\n\nexport default connect(SimpleTable);","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\table\\Table.js"],"names":["React","useEffect","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","renderValueType","handleInputChange","Input","TableTitle","HeaderCols","NoDataTableCell","WaterAnalysisTitle","PropTypes","connect","useStyles","theme","root","table","tableTitle","fontSize","SimpleTable","props","data","headerCols","tablesData","waterAnalysisTitle","actions","updateTablesValues","classes","console","log","tableValues","influencingValues","d10","d11","d21","d22","e30","d32","f32","d34","updateReadOnlyValues","res","values","d12","d23","e32","f34","renderTableData","map","row","location","name","units","fields","field","e"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { renderValueType, handleInputChange } from './utils'\r\nimport Input from '@material-ui/core/Input';\r\nimport TableTitle from 'src/components/table/TableTitle'\r\nimport HeaderCols from 'src/components/table/HeaderCols'\r\nimport NoDataTableCell from 'src/components/table/NoDataTableCell'\r\nimport WaterAnalysisTitle from 'src/components/table/WaterAnalysisTitle'\r\nimport PropTypes from 'prop-types';\r\n// import { calculate } from 'src/components/data/tableUtils';\r\nimport connect from './connect'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    }\r\n}));\r\n\r\nfunction SimpleTable(props) {\r\n    const { data, headerCols, tableTitle, tablesData, waterAnalysisTitle, actions } = props\r\n    const { updateTablesValues } = actions\r\n    const classes = useStyles();\r\n\r\n    console.log(`tablesData`, tablesData);\r\n\r\n    const tableValues = tablesData\r\n    const influencingValues = [\r\n        tableValues.d10,\r\n        tableValues.d11,\r\n        tableValues.d21,\r\n        tableValues.d22,\r\n        tableValues.e30,\r\n        tableValues.d32,\r\n        tableValues.f32,\r\n        tableValues.d34,\r\n    ]\r\n\r\n    useEffect(() => {\r\n        updateReadOnlyValues()\r\n    }, influencingValues)\r\n\r\n    const updateReadOnlyValues = () => {\r\n        if (tableValues.d10 && tableValues.d11) { // d12\r\n            const res = tableValues.d10 - tableValues.d11\r\n            updateTablesValues({ values: { d12: res } })\r\n        }\r\n        if (tableValues.d21 && tableValues.d22) { // d23\r\n            const res = tableValues.d21 - tableValues.d22\r\n            updateTablesValues({ values: { d23: res } })\r\n        }\r\n        if (tableValues.e30 && tableValues.d32) { // e32\r\n            const res = tableValues.e30 * tableValues.d32\r\n            updateTablesValues({ values: { e32: res } })\r\n        }\r\n        if (tableValues.e30 && tableValues.d32) { // f32\r\n            const res = tableValues.e30 * tableValues.d32\r\n            updateTablesValues({ values: { f32: res } })\r\n        }\r\n        if (tableValues.f32 && tableValues.d32 && tableValues.d34) { // f34\r\n            const res = tableValues.f32 / tableValues.d32 * tableValues.d34\r\n            updateTablesValues({ values: { f34: res } })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        if (!data) return <NoDataTableCell className={classes.TableCell} />\r\n        return data.map(row => (\r\n            <TableRow key={row.location}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n\r\n                {row.units &&\r\n                    <TableCell align=\"left\">\r\n                        {row.units}\r\n                    </TableCell>}\r\n\r\n                {row.fields\r\n                    ? row.fields.map((field) => {\r\n                        return <TableCell align=\"left\">\r\n                            {renderValueType(field, updateTablesValues, tableValues, classes)}\r\n                        </TableCell>\r\n                    })\r\n                    : <TableCell align=\"left\">{renderValueType(row, updateTablesValues, tableValues, classes)}</TableCell>\r\n                }\r\n            </TableRow>\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    {tableTitle && <TableTitle className={classes.tableTitle} tableTitle={tableTitle} />}\r\n                    {/* happens only in Water Analysis table */}\r\n                    {waterAnalysisTitle\r\n                        && <WaterAnalysisTitle value={tableValues['e30'] || ''}\r\n                            handleInputChange={(e) => handleInputChange(e, updateTablesValues)} />}\r\n                    {/* ---- */}\r\n                    {headerCols && <HeaderCols data={headerCols} />}\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n// SimpleTable.defaultProps = {\r\n//     units: true\r\n// };\r\n\r\n// SimpleTable.propTypes = {\r\n//     units: PropTypes.bool\r\n// };\r\n\r\nexport default connect(SimpleTable)"]},"metadata":{},"sourceType":"module"}