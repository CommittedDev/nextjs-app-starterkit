{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { TYPES } from \"../data\";\nimport Input from '@material-ui/core/Input';\nimport Slider from '@material-ui/core/Slider';\nimport Select from '@material-ui/core/Select';\n\nvar isOneOf = function isOneOf(keys, arr) {\n  return keys.some(function (key) {\n    return arr.includes(key);\n  });\n};\n\nvar getCalculateNewValues = function getCalculateNewValues(key, value, tableValues) {\n  // const keys = [key]\n  var newValues = _Object$assign({}, tableValues, _defineProperty({}, key, value)); // All if's here\n\n\n  newValues['d12'] = newValues.d10 - newValues.d11;\n  newValues['d23'] = newValues.d21 - newValues.d22;\n  newValues['e32'] = tableValues.e30 * tableValues.d32;\n  newValues['f32'] = tableValues.e30 * tableValues.d32;\n  newValues['f34'] = tableValues.f32 / tableValues.d32 * tableValues.d34;\n  newValues['f35'] = tableValues.f32 / tableValues.d32 * tableValues.d35;\n  newValues['f36'] = tableValues.f32 / tableValues.d32 * tableValues.d36;\n  newValues['f37'] = tableValues.f32 / tableValues.d32 * tableValues.d37;\n  newValues['f38'] = tableValues.f32 / tableValues.d32 * tableValues.d38;\n  newValues['f39'] = tableValues.f32 / tableValues.d32 * tableValues.d39;\n  newValues['d47'] = tableValues.e30;\n  newValues['d48'] = tableValues.d49 / 560 / 1000;\n  newValues['e48'] = tableValues.e49 / 560 / 1000;\n  newValues['e49'] = tableValues.d11 * tableValues.d23 * 1000;\n  newValues['d50'] = tableValues.d49 * 0.000330693393472;\n  newValues['e50'] = tableValues.e49 * 0.000330693393472;\n  newValues['d51'] = tableValues.d48 + tableValues.d52;\n  newValues['e51'] = tableValues.e48 + tableValues.e52;\n  newValues['d52'] = tableValues.d48 * (1 / tableValues.d47);\n  newValues['e52'] = tableValues.e48 * (1 / tableValues.e47);\n  newValues['c56'] = tableValues.d25 * tableValues.d26 * tableValues.d27;\n  newValues['c57'] = tableValues.c55 * tableValues.c56; // end\n\n  return newValues;\n};\n\nexport var handleInputChange = function handleInputChange(event, updateTablesValues, tableValues) {\n  var field = event.target.id;\n  var newValue = Number(event.target.value);\n  var newValues = getCalculateNewValues(field, newValue, tableValues); // debugger\n\n  updateTablesValues({\n    values: newValues\n  });\n};\n\nvar handleSelectChange = function handleSelectChange(event, updateTablesValues, tableValues) {\n  var field = event.target.id;\n  var newValue = event.target.value;\n  var newValues = getCalculateNewValues(field, newValue, tableValues);\n  updateTablesValues({\n    values: newValues\n  });\n};\n\nvar onChangeSlider = function onChangeSlider(event, val, location, updateTablesValues, tableValues) {\n  var field = location;\n  var newValue = val;\n  var newValues = getCalculateNewValues(field, newValue, tableValues);\n  updateTablesValues({\n    values: newValues\n  });\n};\n\nfunction valuetext(value) {\n  return \"\".concat(value);\n}\n\nvar getMarks = function getMarks(row) {\n  if (!row) return [];\n  var arr = [];\n  var i = row.min;\n\n  while (i <= row.max) {\n    arr.push({\n      value: i\n    });\n    i += row.ticks;\n  } // if we want lables in the  edges of the slider\n  // if (arr.length) { \n  //     debugger\n  //     arr[0].label = row.min.toString()\n  //     arr[arr.length - 1].label = row.max.toString()\n  // }\n\n\n  return arr;\n};\n\nexport var renderValueType = function renderValueType(row, updateTablesValues, tableValues, classes) {\n  var type = row.type;\n\n  switch (type) {\n    case TYPES.NUMERIC:\n      return __jsx(Input, {\n        id: row.location,\n        label: \"Number\",\n        value: tableValues[row.location],\n        onChange: function onChange(e) {\n          return handleInputChange(e, updateTablesValues, tableValues);\n        },\n        type: \"number\",\n        className: classes.textField\n      });\n\n    case TYPES.RANGE:\n      return __jsx(Slider, {\n        defaultValue: tableValues[row.location] //Math.floor((row.min + row.max) / 2)\n        ,\n        getAriaValueText: valuetext,\n        onChange: function onChange(e, val) {\n          return onChangeSlider(e, val, row.location, updateTablesValues, tableValues);\n        },\n        \"aria-labelledby\": \"discrete-slider-always\",\n        step: row.ticks,\n        min: row.min,\n        max: row.max,\n        marks: getMarks(row),\n        valueLabelDisplay: \"on\"\n      });\n\n    case TYPES.SELECT:\n      return __jsx(Select, {\n        id: row.location,\n        \"native\": true,\n        value: tableValues[row.location],\n        onChange: function onChange(e) {\n          return handleSelectChange(e, updateTablesValues, tableValues);\n        }\n      }, row.data.map(function (item, i) {\n        return __jsx(\"option\", {\n          key: i,\n          value: item\n        }, item);\n      }));\n\n    case TYPES.NOT_EDITABLE:\n      return __jsx(Input, {\n        id: row.location,\n        value: isNaN(tableValues[row.location]) ? '' : tableValues[row.location],\n        readOnly: true,\n        className: classes.textFieldUNEditable\n      });\n\n    default:\n      return row.type;\n  }\n};","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\table\\utils.js"],"names":["TYPES","Input","Slider","Select","isOneOf","keys","arr","some","key","includes","getCalculateNewValues","value","tableValues","newValues","d10","d11","d21","d22","e30","d32","f32","d34","d35","d36","d37","d38","d39","d49","e49","d23","d48","d52","e48","e52","d47","e47","d25","d26","d27","c55","c56","handleInputChange","event","updateTablesValues","field","target","id","newValue","Number","values","handleSelectChange","onChangeSlider","val","location","valuetext","getMarks","row","i","min","max","push","ticks","renderValueType","classes","type","NUMERIC","e","textField","RANGE","SELECT","data","map","item","NOT_EDITABLE","isNaN","textFieldUNEditable"],"mappings":"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","sourcesContent":["import { TYPES } from 'src/components/data'\r\nimport Input from '@material-ui/core/Input';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst isOneOf = (keys, arr) => keys.some(key => arr.includes(key));\r\n\r\nconst getCalculateNewValues = (key, value, tableValues) => {\r\n    // const keys = [key]\r\n    const newValues = Object.assign({}, tableValues, { [key]: value });\r\n    // All if's here\r\n    newValues['d12'] = newValues.d10 - newValues.d11\r\n    newValues['d23'] = newValues.d21 - newValues.d22\r\n    newValues['e32'] = tableValues.e30 * tableValues.d32\r\n    newValues['f32'] = tableValues.e30 * tableValues.d32\r\n    newValues['f34'] = tableValues.f32 / tableValues.d32 * tableValues.d34\r\n    newValues['f35'] = tableValues.f32 / tableValues.d32 * tableValues.d35\r\n    newValues['f36'] = tableValues.f32 / tableValues.d32 * tableValues.d36\r\n    newValues['f37'] = tableValues.f32 / tableValues.d32 * tableValues.d37\r\n    newValues['f38'] = tableValues.f32 / tableValues.d32 * tableValues.d38\r\n    newValues['f39'] = tableValues.f32 / tableValues.d32 * tableValues.d39\r\n    newValues['d47'] = tableValues.e30\r\n    newValues['d48'] = tableValues.d49 / 560 / 1000\r\n    newValues['e48'] = tableValues.e49 / 560 / 1000\r\n    newValues['e49'] = tableValues.d11 * tableValues.d23 * 1000\r\n    newValues['d50'] = tableValues.d49 * 0.000330693393472\r\n    newValues['e50'] = tableValues.e49 * 0.000330693393472\r\n    newValues['d51'] = tableValues.d48 + tableValues.d52\r\n    newValues['e51'] = tableValues.e48 + tableValues.e52\r\n    newValues['d52'] = tableValues.d48 * (1 / tableValues.d47)\r\n    newValues['e52'] = tableValues.e48 * (1 / tableValues.e47)\r\n    newValues['c56'] = tableValues.d25 * tableValues.d26 * tableValues.d27\r\n    newValues['c57'] = tableValues.c55 * tableValues.c56\r\n    // end\r\n    return newValues\r\n}\r\n\r\nexport const handleInputChange = (event, updateTablesValues, tableValues) => {\r\n    const field = event.target.id;\r\n    const newValue = Number(event.target.value);\r\n    const newValues = getCalculateNewValues(field, newValue, tableValues)\r\n    // debugger\r\n    updateTablesValues({ values: newValues })\r\n};\r\n\r\nconst handleSelectChange = (event, updateTablesValues, tableValues) => {\r\n    const field = event.target.id;\r\n    const newValue = event.target.value;\r\n    const newValues = getCalculateNewValues(field, newValue, tableValues)\r\n    updateTablesValues({ values: newValues })\r\n};\r\n\r\nconst onChangeSlider = (event, val, location, updateTablesValues, tableValues) => {\r\n    const field = location;\r\n    const newValue = val;\r\n    const newValues = getCalculateNewValues(field, newValue, tableValues)\r\n    updateTablesValues({ values: newValues })\r\n};\r\n\r\n\r\nfunction valuetext(value) {\r\n    return `${value}`;\r\n}\r\n\r\nconst getMarks = (row, ) => {\r\n    if (!row) return [];\r\n    let arr = []\r\n    let i = row.min\r\n    while (i <= row.max) {\r\n        arr.push({ value: i })\r\n        i += row.ticks\r\n    }\r\n    // if we want lables in the  edges of the slider\r\n    // if (arr.length) { \r\n    //     debugger\r\n    //     arr[0].label = row.min.toString()\r\n    //     arr[arr.length - 1].label = row.max.toString()\r\n    // }\r\n    return arr\r\n}\r\n\r\nexport const renderValueType = (row, updateTablesValues, tableValues, classes) => {\r\n    const type = row.type\r\n    switch (type) {\r\n        case TYPES.NUMERIC:\r\n            return <Input\r\n                id={row.location}\r\n                label=\"Number\"\r\n                value={tableValues[row.location]}\r\n                onChange={(e) => handleInputChange(e, updateTablesValues, tableValues)}\r\n                type=\"number\"\r\n                className={classes.textField}\r\n\r\n            />\r\n        case TYPES.RANGE:\r\n            return <Slider\r\n                defaultValue={tableValues[row.location]}//Math.floor((row.min + row.max) / 2)\r\n                getAriaValueText={valuetext}\r\n                onChange={(e, val) => onChangeSlider(e, val, row.location, updateTablesValues, tableValues)}\r\n                aria-labelledby=\"discrete-slider-always\"\r\n                step={row.ticks}\r\n                min={row.min}\r\n                max={row.max}\r\n                marks={getMarks(row)}\r\n                valueLabelDisplay=\"on\"\r\n            />\r\n        case TYPES.SELECT:\r\n            return <Select\r\n                id={row.location}\r\n                native\r\n                value={tableValues[row.location]}\r\n                onChange={(e) => handleSelectChange(e, updateTablesValues, tableValues)}\r\n            >\r\n                {row.data.map((item, i) => {\r\n                    return <option key={i} value={item}>{item}</option>\r\n                })}\r\n            </Select>\r\n        case TYPES.NOT_EDITABLE:\r\n            return <Input\r\n                id={row.location}\r\n                value={isNaN(tableValues[row.location]) ? '' : tableValues[row.location]}\r\n                readOnly\r\n                className={classes.textFieldUNEditable}\r\n            />\r\n        default:\r\n            return row.type\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}