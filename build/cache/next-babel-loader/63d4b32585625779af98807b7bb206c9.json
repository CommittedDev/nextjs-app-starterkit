{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { TYPES } from \"../data\";\nimport Input from '@material-ui/core/Input';\nimport Slider from '@material-ui/core/Slider';\nimport Select from '@material-ui/core/Select';\n\nconst handleInputChange = (event, updateTablesValues) => {\n  updateTablesValues({\n    values: {\n      [event.target.id]: event.target.value\n    }\n  });\n};\n\nconst handleSelectChange = (event, updateTablesValues) => {\n  updateTablesValues({\n    values: {\n      [event.target.id]: event.target.value\n    }\n  });\n};\n\nconst onChangeSlider = (event, val, location, updateTablesValues) => {\n  updateTablesValues({\n    values: {\n      [location]: val\n    }\n  });\n};\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nconst getMarks = row => {\n  if (!row) return [];\n  let arr = [];\n  let i = row.min;\n\n  while (i <= row.max) {\n    arr.push({\n      value: i\n    });\n    i += row.ticks;\n  } // if we want lables in the  edges of the slider\n  // if (arr.length) { \n  //     debugger\n  //     arr[0].label = row.min.toString()\n  //     arr[arr.length - 1].label = row.max.toString()\n  // }\n\n\n  return arr;\n};\n\nexport const renderValueTyperenderValueType = (row, updateTablesValues, tableValues, classes) => {\n  switch (row.type) {\n    case TYPES.NUMERIC:\n      return __jsx(Input, {\n        id: row.location,\n        label: \"Number\",\n        value: tableValues[row.location] || '',\n        onChange: e => handleInputChange(e, updateTablesValues),\n        type: \"number\",\n        className: classes.textField\n      });\n\n    case TYPES.RANGE:\n      return __jsx(Slider, {\n        defaultValue: Math.floor((row.min + row.max) / 2),\n        getAriaValueText: valuetext,\n        onChange: (e, val) => onChangeSlider(e, val, row.location, updateTablesValues),\n        \"aria-labelledby\": \"discrete-slider-always\",\n        step: row.ticks,\n        min: row.min,\n        max: row.max,\n        marks: getMarks(row),\n        valueLabelDisplay: \"on\"\n      });\n\n    case TYPES.SELECT:\n      return __jsx(Select, {\n        id: row.location,\n        native: true,\n        value: tableValues[row.location],\n        onChange: e => handleSelectChange(e, updateTablesValues)\n      }, row.data.map((item, i) => {\n        return __jsx(\"option\", {\n          key: i,\n          value: item\n        }, item);\n      }));\n\n    case TYPES.NOT_EDITABLE:\n      return __jsx(Input, {\n        id: row.location,\n        value: tableValues[row.location] || '',\n        readOnly: true,\n        className: classes.textField\n      });\n\n    default:\n      return row.type;\n  }\n};","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\table\\utils.js"],"names":["TYPES","Input","Slider","Select","handleInputChange","event","updateTablesValues","values","target","id","value","handleSelectChange","onChangeSlider","val","location","valuetext","getMarks","row","arr","i","min","max","push","ticks","renderValueTyperenderValueType","tableValues","classes","type","NUMERIC","e","textField","RANGE","Math","floor","SELECT","data","map","item","NOT_EDITABLE"],"mappings":"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","sourcesContent":["import { TYPES } from 'src/components/data'\r\nimport Input from '@material-ui/core/Input';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst handleInputChange = (event, updateTablesValues) => {\r\n    updateTablesValues({ values: { [event.target.id]: event.target.value } })\r\n};\r\n\r\nconst handleSelectChange = (event, updateTablesValues) => {\r\n    updateTablesValues({ values: { [event.target.id]: event.target.value } })\r\n};\r\n\r\nconst onChangeSlider = (event, val, location, updateTablesValues) => {\r\n    updateTablesValues({ values: { [location]: val } })\r\n};\r\n\r\nfunction valuetext(value) {\r\n    return `${value}`;\r\n}\r\n\r\nconst getMarks = (row, ) => {\r\n    if (!row) return [];\r\n    let arr = []\r\n    let i = row.min\r\n    while (i <= row.max) {\r\n        arr.push({ value: i })\r\n        i += row.ticks\r\n    }\r\n    // if we want lables in the  edges of the slider\r\n    // if (arr.length) { \r\n    //     debugger\r\n    //     arr[0].label = row.min.toString()\r\n    //     arr[arr.length - 1].label = row.max.toString()\r\n    // }\r\n    return arr\r\n}\r\n\r\nexport const renderValueTyperenderValueType = (row, updateTablesValues, tableValues, classes) => {\r\n    switch (row.type) {\r\n        case TYPES.NUMERIC:\r\n            return <Input\r\n                id={row.location}\r\n                label=\"Number\"\r\n                value={tableValues[row.location] || ''}\r\n                onChange={(e) => handleInputChange(e, updateTablesValues)}\r\n                type=\"number\"\r\n                className={classes.textField}\r\n\r\n            />\r\n        case TYPES.RANGE:\r\n            return <Slider\r\n                defaultValue={Math.floor((row.min + row.max) / 2)}\r\n                getAriaValueText={valuetext}\r\n                onChange={(e, val) => onChangeSlider(e, val, row.location, updateTablesValues)}\r\n                aria-labelledby=\"discrete-slider-always\"\r\n                step={row.ticks}\r\n                min={row.min}\r\n                max={row.max}\r\n                marks={getMarks(row)}\r\n                valueLabelDisplay=\"on\"\r\n            />\r\n        case TYPES.SELECT:\r\n            return <Select\r\n                id={row.location}\r\n                native\r\n                value={tableValues[row.location]}\r\n                onChange={(e) => handleSelectChange(e, updateTablesValues)}\r\n            >\r\n                {row.data.map((item, i) => {\r\n                    return <option key={i} value={item}>{item}</option>\r\n                })}\r\n            </Select>\r\n        case TYPES.NOT_EDITABLE:\r\n            return <Input\r\n                id={row.location}\r\n                value={tableValues[row.location] || ''}\r\n                readOnly\r\n                className={classes.textField}\r\n            />\r\n        default:\r\n            return row.type\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}