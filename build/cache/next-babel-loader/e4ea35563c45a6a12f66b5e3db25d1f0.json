{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { renderValueType, handleInputChange } from \"./utils\";\nimport Input from '@material-ui/core/Input';\nimport TableTitle from \"./TableTitle\";\nimport HeaderCols from \"./HeaderCols\";\nimport NoDataTableCell from \"./NoDataTableCell\";\nimport PropTypes from 'prop-types'; // import { calculate } from 'src/components/data/tableUtils';\n\nimport connect from \"./connect\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {// width: '100%',\n      // marginTop: theme.spacing(3),\n      // overflowX: 'auto',\n    },\n    table: {// width: 600,\n    },\n    tableTitle: {\n      fontSize: 20\n    },\n    TableCell: {}\n  };\n});\n\nfunction SimpleTable(props) {\n  var data = props.data,\n      headerCols = props.headerCols,\n      tableTitle = props.tableTitle;\n  var classes = useStyles();\n  console.log(\"tablesData\", props.tablesData);\n  var tableValues = props.tablesData;\n  var influencingValues = [tableValues.d10, tableValues.d11, tableValues.d21, tableValues.d22, tableValues.e30, tableValues.d32];\n  useEffect(function () {\n    updateReadOnlyValues();\n  }, influencingValues);\n\n  var updateReadOnlyValues = function updateReadOnlyValues() {\n    if (tableValues.d10 && tableValues.d11) {\n      // d12\n      var res = tableValues.d10 - tableValues.d11;\n      props.actions.updateTablesValues({\n        values: {\n          d12: res\n        }\n      });\n    }\n\n    if (tableValues.d21 && tableValues.d22) {\n      // d23\n      var _res = tableValues.d21 - tableValues.d22;\n\n      props.actions.updateTablesValues({\n        values: {\n          d23: _res\n        }\n      });\n    }\n\n    if (tableValues.e30 && tableValues.d32) {\n      // e32\n      var _res2 = tableValues.e30 * tableValues.d32;\n\n      props.actions.updateTablesValues({\n        values: {\n          e32: _res2\n        }\n      });\n    }\n  };\n\n  var renderTableData = function renderTableData() {\n    if (!data) return __jsx(NoDataTableCell, {\n      className: classes.TableCell\n    });\n    return data.map(function (row) {\n      return __jsx(TableRow, {\n        key: row.location\n      }, __jsx(TableCell, {\n        align: \"left\",\n        className: classes.TableCell\n      }, row.name), row.units && __jsx(TableCell, {\n        align: \"left\"\n      }, row.units), row.fields.map(function (field) {\n        return __jsx(TableCell, {\n          align: \"left\"\n        }, renderValueType(field, props.actions.updateTablesValues, tableValues, classes));\n      }));\n    });\n  };\n\n  return __jsx(Paper, {\n    className: classes.root\n  }, __jsx(Table, {\n    className: classes.table\n  }, __jsx(TableHead, null, tableTitle && __jsx(TableTitle, {\n    className: classes.tableTitle,\n    tableTitle: tableTitle\n  }), headerCols && __jsx(HeaderCols, {\n    data: headerCols\n  })), __jsx(TableBody, null, renderTableData())));\n} // SimpleTable.defaultProps = {\n//     units: true\n// };\n// SimpleTable.propTypes = {\n//     units: PropTypes.bool\n// };\n\n\nexport default connect(SimpleTable);","map":{"version":3,"sources":["C:\\Users\\elad\\Desktop\\committed\\UET\\src\\components\\table\\TableDiffrent.js"],"names":["React","useEffect","makeStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","renderValueType","handleInputChange","Input","TableTitle","HeaderCols","NoDataTableCell","PropTypes","connect","useStyles","theme","root","table","tableTitle","fontSize","SimpleTable","props","data","headerCols","classes","console","log","tablesData","tableValues","influencingValues","d10","d11","d21","d22","e30","d32","updateReadOnlyValues","res","actions","updateTablesValues","values","d12","d23","e32","renderTableData","map","row","location","name","units","fields","field"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { renderValueType, handleInputChange } from './utils'\r\nimport Input from '@material-ui/core/Input';\r\nimport TableTitle from 'src/components/table/TableTitle'\r\nimport HeaderCols from 'src/components/table/HeaderCols'\r\nimport NoDataTableCell from 'src/components/table/NoDataTableCell'\r\nimport PropTypes from 'prop-types';\r\n// import { calculate } from 'src/components/data/tableUtils';\r\nimport connect from './connect'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width: '100%',\r\n        // marginTop: theme.spacing(3),\r\n        // overflowX: 'auto',\r\n    },\r\n    table: {\r\n        // width: 600,\r\n    },\r\n    tableTitle: {\r\n        fontSize: 20\r\n    },\r\n    TableCell: {\r\n\r\n    }\r\n}));\r\n\r\nfunction SimpleTable(props) {\r\n    const { data, headerCols, tableTitle } = props\r\n    const classes = useStyles();\r\n\r\n    console.log(`tablesData`, props.tablesData);\r\n\r\n    const tableValues = props.tablesData\r\n    const influencingValues = [\r\n        tableValues.d10,\r\n        tableValues.d11,\r\n        tableValues.d21,\r\n        tableValues.d22,\r\n        tableValues.e30,\r\n        tableValues.d32\r\n    ]\r\n\r\n    useEffect(() => {\r\n        updateReadOnlyValues()\r\n    }, influencingValues)\r\n\r\n    const updateReadOnlyValues = () => {\r\n        if (tableValues.d10 && tableValues.d11) { // d12\r\n            const res = tableValues.d10 - tableValues.d11\r\n            props.actions.updateTablesValues({ values: { d12: res } })\r\n        }\r\n        if (tableValues.d21 && tableValues.d22) { // d23\r\n            const res = tableValues.d21 - tableValues.d22\r\n            props.actions.updateTablesValues({ values: { d23: res } })\r\n        }\r\n        if (tableValues.e30 && tableValues.d32) { // e32\r\n            const res = tableValues.e30 * tableValues.d32\r\n            props.actions.updateTablesValues({ values: { e32: res } })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const renderTableData = () => {\r\n        if (!data) return <NoDataTableCell className={classes.TableCell} />\r\n        return data.map(row => (\r\n            <TableRow key={row.location}>\r\n                <TableCell align=\"left\" className={classes.TableCell}>\r\n                    {row.name}\r\n                </TableCell>\r\n                {row.units &&  <TableCell align=\"left\">{row.units}</TableCell>}\r\n                {row.fields.map((field) => {\r\n                    return <TableCell align=\"left\">\r\n                        {renderValueType(field, props.actions.updateTablesValues, tableValues, classes)}\r\n                    </TableCell>\r\n                })}\r\n            </TableRow>\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    {tableTitle && <TableTitle className={classes.tableTitle} tableTitle={tableTitle} />}\r\n                    {headerCols && <HeaderCols data={headerCols} />}\r\n                </TableHead>\r\n                <TableBody>\r\n                    {renderTableData()}\r\n                </TableBody>\r\n            </Table>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n// SimpleTable.defaultProps = {\r\n//     units: true\r\n// };\r\n\r\n// SimpleTable.propTypes = {\r\n//     units: PropTypes.bool\r\n// };\r\n\r\nexport default connect(SimpleTable)"]},"metadata":{},"sourceType":"module"}